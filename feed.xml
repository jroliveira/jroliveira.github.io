<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Junior Oliveira</title>
    <link>https://jroliveira.net/</link>
    
    <atom:link href="https://jroliveira.net/feed.xml" rel="self" type="application/rss+xml"/>
    
    <description>Blog about code and stuff.</description>
    <pubDate>Wed, 19 Oct 2022 17:32:00 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Novidades do C# 8.0: Default interface methods</title>
      <link>https://jroliveira.net/pt/csharp-8-default-interface-methods/</link>
      <guid>https://jroliveira.net/pt/csharp-8-default-interface-methods/</guid>
      <pubDate>Wed, 09 Sep 2020 00:00:00 GMT</pubDate>
      
      <description>Post sobre a novidade do C# 8.0: Default interface methods</description>
      
      
      
      <content:encoded><![CDATA[<p>Olá, neste artigo eu vou escrever sobre a novidade do <a href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8#default-interface-methods">C# 8 default interface methods</a>.<br><a href="/pt/csharp-8">Neste artigo</a> você poderá ver um resumo das novidades que eu acho mais relevantes que vieram no C# 8.</p><span id="more"></span><h5 id="Index"><a href="#Index" class="headerlink" title="Index:"></a>Index:</h5><ul><li><a href="/pt/csharp-8-default-interface-methods/#Antes-do-C-8-%E2%86%91">Antes do C# 8</a>;</li><li><a href="/pt/csharp-8-default-interface-methods/#Antes-do-C-8-uma-opcao-com-interface-extensions-%E2%86%91">Antes do C# 8 (uma opção com interface extensions)</a>;</li><li><a href="/pt/csharp-8-default-interface-methods/#Depois-do-C-8-%E2%86%91">Depois do C# 8</a>;</li><li><a href="/pt/csharp-8-default-interface-methods/#Consideracoes-finais-%E2%86%91">Considerações finais</a></li></ul><h5 id="Antes-do-C-8-↑"><a href="#Antes-do-C-8-↑" class="headerlink" title="Antes do C# 8 ↑"></a>Antes do C# 8 <a href="#Index">↑</a></h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ILimit</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">IFilterBuilder <span class="title">Limit</span>(<span class="params"><span class="keyword">in</span> <span class="built_in">uint</span> limit</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISkip</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">IFilterBuilder <span class="title">Skip</span>(<span class="params"><span class="keyword">in</span> <span class="built_in">uint</span> skip</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISelect</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">IFilterBuilder <span class="title">Select</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">string</span>[] fields</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFilterBuilder</span> : <span class="title">ILimit</span>, <span class="title">ISkip</span>, <span class="title">ISelect</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">Build</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FilterBuilder</span> : <span class="title">IFilterBuilder</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ICollection&lt;<span class="built_in">string</span>&gt; filters;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FilterBuilder</span>()</span> =&gt; <span class="keyword">this</span>.filters = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IFilterBuilder <span class="title">Skip</span>(<span class="params"><span class="keyword">in</span> <span class="built_in">uint</span> skip</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> newSkip = skip &lt; <span class="number">1</span></span><br><span class="line">            ? <span class="number">1</span></span><br><span class="line">            : skip;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.filters.Add(<span class="string">$&quot;filter[skip]=<span class="subst">&#123;newSkip&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IFilterBuilder <span class="title">Limit</span>(<span class="params"><span class="keyword">in</span> <span class="built_in">uint</span> limit</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> newLimit = limit &lt; <span class="number">1</span></span><br><span class="line">            ? <span class="number">1</span></span><br><span class="line">            : limit;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.filters.Add(<span class="string">$&quot;filter[limit]=<span class="subst">&#123;newLimit&#125;</span>&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IFilterBuilder <span class="title">Select</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">string</span>[] fields</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> field <span class="keyword">in</span> fields)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.filters.Add(<span class="string">$&quot;filter[fields][<span class="subst">&#123;field&#125;</span>]=true&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Build</span>()</span> =&gt; <span class="built_in">string</span>.Join(<span class="string">&quot;&amp;&quot;</span>, <span class="keyword">this</span>.filters);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IFilterBuilder <span class="title">NewFilterBuilder</span>()</span> =&gt; <span class="keyword">new</span> FilterBuilder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Antes-do-C-8-uma-opcao-com-interface-extensions-↑"><a href="#Antes-do-C-8-uma-opcao-com-interface-extensions-↑" class="headerlink" title="Antes do C# 8 (uma opção com interface extensions)  ↑"></a>Antes do C# 8 (uma opção com interface extensions)  <a href="#Index">↑</a></h5><p>Este exemplo foi inspirado no artigo <a href="https://dev.to/htissink/pseudo-traits-in-c-lnp">Pseudo Traits in C#</a>, que traz uma abordagem de como podemos fazer praticamente a mesma coisa sem precisar desta nova funcionalidade.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFilterBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">IFilterBuilder <span class="title">AddFilters</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">string</span>[] values</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ILimit</span> : <span class="title">IFilterBase</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">FilterExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IFilterBuilder <span class="title">Limit</span>(<span class="params"><span class="keyword">this</span> ILimit @<span class="keyword">this</span>, <span class="built_in">uint</span> limit</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> newLimit = limit &lt; <span class="number">1</span></span><br><span class="line">            ? <span class="number">1</span></span><br><span class="line">            : limit;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> @this</span><br><span class="line">            .AddFilters(<span class="string">$&quot;filter[limit]=<span class="subst">&#123;newLimit&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISkip</span> : <span class="title">IFilterBase</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">FilterExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IFilterBuilder <span class="title">Skip</span>(<span class="params"><span class="keyword">this</span> ISkip @<span class="keyword">this</span>, <span class="built_in">uint</span> skip</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> newSkip = skip &lt; <span class="number">1</span></span><br><span class="line">            ? <span class="number">1</span></span><br><span class="line">            : skip;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> @this</span><br><span class="line">            .AddFilters(<span class="string">$&quot;filter[skip]=<span class="subst">&#123;newSkip&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISelect</span> : <span class="title">IFilterBase</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">partial</span> <span class="keyword">class</span> <span class="title">FilterExtension</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IFilterBuilder <span class="title">Select</span>(<span class="params"><span class="keyword">this</span> ISelect @<span class="keyword">this</span>, <span class="keyword">params</span> <span class="built_in">string</span>[] fields</span>)</span> =&gt; @this</span><br><span class="line">        .AddFilters(fields</span><br><span class="line">            .Select(field =&gt; <span class="string">$&quot;filter[fields][<span class="subst">&#123;field&#125;</span>]=true&quot;</span>)</span><br><span class="line">            .ToArray());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFilterBuilder</span> : <span class="title">ILimit</span>, <span class="title">ISkip</span>, <span class="title">ISelect</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">Build</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FilterBuilder</span> : <span class="title">IFilterBuilder</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ICollection&lt;<span class="built_in">string</span>&gt; filters;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FilterBuilder</span>()</span> =&gt; <span class="keyword">this</span>.filters = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Build</span>()</span> =&gt; <span class="built_in">string</span>.Join(<span class="string">&quot;&amp;&quot;</span>, <span class="keyword">this</span>.filters);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IFilterBuilder <span class="title">AddFilters</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">string</span>[] values</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> <span class="keyword">value</span> <span class="keyword">in</span> values)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.filters.Add(<span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IFilterBuilder <span class="title">NewFilterBuilder</span>()</span> =&gt; <span class="keyword">new</span> FilterBuilder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Depois-do-C-8-↑"><a href="#Depois-do-C-8-↑" class="headerlink" title="Depois do C# 8 ↑"></a>Depois do C# 8 <a href="#Index">↑</a></h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFilterBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">IFilterBuilder <span class="title">AddFilters</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">string</span>[] values</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISkip</span> : <span class="title">IFilterBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">IFilterBuilder <span class="title">Skip</span>(<span class="params"><span class="keyword">in</span> <span class="built_in">uint</span> skip</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> newSkip = skip &lt; <span class="number">1</span></span><br><span class="line">            ? <span class="number">1</span></span><br><span class="line">            : skip;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">            .AddFilters(<span class="string">$&quot;filter[skip]=<span class="subst">&#123;newSkip&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ILimit</span> : <span class="title">IFilterBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">IFilterBuilder <span class="title">Limit</span>(<span class="params"><span class="keyword">in</span> <span class="built_in">uint</span> limit</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> newLimit = limit &lt; <span class="number">1</span></span><br><span class="line">            ? <span class="number">1</span></span><br><span class="line">            : limit;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">            .AddFilters(<span class="string">$&quot;filter[limit]=<span class="subst">&#123;newLimit&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISelect</span> : <span class="title">IFilterBase</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IFilterBuilder <span class="title">Select</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">string</span>[] fields</span>)</span> =&gt; <span class="keyword">this</span></span><br><span class="line">        .AddFilters(fields</span><br><span class="line">            .Select(field =&gt; <span class="string">$&quot;filter[fields][<span class="subst">&#123;field&#125;</span>]=true&quot;</span>)</span><br><span class="line">            .ToArray());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IFilterBuilder</span> : <span class="title">ILimit</span>, <span class="title">ISkip</span>, <span class="title">ISelect</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="built_in">string</span> <span class="title">Build</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">FilterBuilder</span> : <span class="title">IFilterBuilder</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ICollection&lt;<span class="built_in">string</span>&gt; filters;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FilterBuilder</span>()</span> =&gt; <span class="keyword">this</span>.filters = <span class="keyword">new</span> List&lt;<span class="built_in">string</span>&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">string</span> <span class="title">Build</span>()</span> =&gt; <span class="built_in">string</span>.Join(<span class="string">&quot;&amp;&quot;</span>, <span class="keyword">this</span>.filters);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IFilterBuilder <span class="title">AddFilters</span>(<span class="params"><span class="keyword">params</span> <span class="built_in">string</span>[] values</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> <span class="keyword">value</span> <span class="keyword">in</span> values)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.filters.Add(<span class="keyword">value</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> IFilterBuilder <span class="title">NewFilterBuilder</span>()</span> =&gt; <span class="keyword">new</span> FilterBuilder();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Consideracoes-finais-↑"><a href="#Consideracoes-finais-↑" class="headerlink" title="Considerações finais ↑"></a>Considerações finais <a href="#Index">↑</a></h5><p>Esta nova funcionalidade dividiu um pouco a opinião da comunidade, alguns gostaram e outros nem tanto, abaixo dois artigos que ilustram bem essas opiniões:</p><ul><li><a href="https://dev.to/htissink/pseudo-traits-in-c-lnp">Pseudo Traits in C#</a>;</li><li><a href="https://dev.to/lolle2000la/why-interface-default-implementations-in-c-are-a-great-thing-52nj">Why interface default implementations in C# are a great thing</a>;</li></ul><p>O último exemplo com a implementação desta nova funcionalidade foi retirado do projeto <a href="https://github.com/jroliveira/http-query-filter/">Http.Query.Filter</a>.</p><p>Obrigado pela visita 🙂!</p>]]></content:encoded>
      
      
      <category domain="https://jroliveira.net/categories/dev/">dev</category>
      
      
      <category domain="https://jroliveira.net/tags/csharp/">csharp</category>
      
      
      <comments>https://jroliveira.net/pt/csharp-8-default-interface-methods/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Novidades do C# 8</title>
      <link>https://jroliveira.net/pt/csharp-8/</link>
      <guid>https://jroliveira.net/pt/csharp-8/</guid>
      <pubDate>Sun, 06 Sep 2020 00:00:00 GMT</pubDate>
      
      <description>Post sobre algumas novidades do C# 8.</description>
      
      
      
      <content:encoded><![CDATA[<p>Olá, neste artigo eu vou escrever um resumo das novidades que eu acho mais relevantes que vieram no C# na versão <a href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-8">8</a>.</p><span id="more"></span><h5 id="Index"><a href="#Index" class="headerlink" title="Index:"></a>Index:</h5><ul><li><a href="/pt/csharp-8/#Deconstruct-%E2%86%91">Deconstruct</a>;</li><li><a href="/pt/csharp-8/#using-Declarations-%E2%86%91"><code>using</code> Declarations</a>;</li><li><a href="/pt/csharp-8/#static-Local-functions-%E2%86%91"><code>static</code> Local functions</a>;</li><li><a href="/pt/csharp-8/#Nullable-reference-types-%E2%86%91">Nullable reference types</a>;</li><li><a href="/pt/csharp-8/#Operator-que-perdoa-nulo-%E2%86%91"><code>!</code> Operator (que perdoa nulo)</a></li><li><a href="/pt/csharp-8/#Asynchronous-streams-%E2%86%91">Asynchronous streams</a>;</li><li><a href="/pt/csharp-8/#Null-coalescing-assignment-%E2%86%91">Null-coalescing assignment</a>;</li><li><a href="/pt/csharp-8/#Mais-exemplos-%E2%86%91">Mais exemplos</a></li></ul><h5 id="Deconstruct-↑"><a href="#Deconstruct-↑" class="headerlink" title="Deconstruct ↑"></a>Deconstruct <a href="#Index">↑</a></h5><p>Antes.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">LoggingConfiguration</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> Enabled &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>? Path &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Logger</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">LogInfo</span>(<span class="params"><span class="keyword">in</span> LoggingConfiguration config, <span class="keyword">in</span> <span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> configuration = config ?? <span class="keyword">new</span> LoggingConfiguration();</span><br><span class="line">        <span class="keyword">if</span> (!configuration.Enabled)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;configuration.Path ?? <span class="string">&quot;logs/.log&quot;</span>&#125;</span> =&gt; <span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Depois.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">LoggingConfiguration</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">bool</span> Enabled &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span>? Path &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Deconstruct</span>(<span class="params"><span class="keyword">out</span> <span class="built_in">bool</span> enabled, <span class="keyword">out</span> <span class="built_in">string</span> path</span>)</span> =&gt; (enabled, path) = (</span><br><span class="line">        <span class="keyword">this</span>.Enabled,</span><br><span class="line">        <span class="keyword">this</span>.Path ?? <span class="string">&quot;logs/.log&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Logger</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">LogInfo</span>(<span class="params"><span class="keyword">in</span> LoggingConfiguration config, <span class="keyword">in</span> <span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> (enabled, path) = config ?? <span class="keyword">new</span> LoggingConfiguration();</span><br><span class="line">        <span class="keyword">if</span> (!enabled)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;path&#125;</span> =&gt; <span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="using-Declarations-↑"><a href="#using-Declarations-↑" class="headerlink" title="using Declarations ↑"></a><code>using</code> Declarations <a href="#Index">↑</a></h5><p>Antes.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Reader</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">Read</span>(<span class="params"><span class="keyword">in</span> <span class="built_in">string</span> path</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> stream = File.OpenRead(path))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">using</span> (<span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(stream))</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> reader.ReadToEndAsync();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Depois.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Reader</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Task&lt;<span class="built_in">string</span>&gt; <span class="title">Read</span>(<span class="params"><span class="keyword">in</span> <span class="built_in">string</span> path</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">using</span> <span class="keyword">var</span> stream = File.OpenRead(path);</span><br><span class="line">        <span class="keyword">using</span> <span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(stream);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> reader.ReadToEndAsync();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="static-Local-functions-↑"><a href="#static-Local-functions-↑" class="headerlink" title="static Local functions ↑"></a><code>static</code> Local functions <a href="#Index">↑</a></h5><p>Antes.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogInfo</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Log(<span class="string">&quot;Info&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Log</span>(<span class="params"><span class="keyword">in</span> <span class="built_in">string</span> level</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;level&#125;</span> -&gt; <span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Depois.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogInfo</span>(<span class="params"><span class="keyword">in</span> <span class="built_in">string</span> message</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Log(<span class="string">&quot;Info&quot;</span>, message);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Log</span>(<span class="params"><span class="keyword">in</span> <span class="built_in">string</span> level, <span class="keyword">in</span> <span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;level&#125;</span> -&gt; <span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Nullable-reference-types-↑"><a href="#Nullable-reference-types-↑" class="headerlink" title="Nullable reference types ↑"></a>Nullable reference types <a href="#Index">↑</a></h5><p>Para habilitar a verificar de <code>null</code> reference types, adicione no seu <code>csproj</code> o código abaixo:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PropertyGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">LangVersion</span>&gt;</span>8.0<span class="tag">&lt;/<span class="name">LangVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Nullable</span>&gt;</span>enable<span class="tag">&lt;/<span class="name">Nullable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">PropertyGroup</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Com este configuração o compilador vai começar a lançar <strong>warning</strong> em praticamente todo o trecho de código que pode conter <code>null</code>.</p><h5 id="Operator-que-perdoa-nulo-↑"><a href="#Operator-que-perdoa-nulo-↑" class="headerlink" title="! Operator (que perdoa nulo) ↑"></a><code>!</code> Operator (que perdoa nulo) <a href="#Index">↑</a></h5><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">User</span>(<span class="params"><span class="keyword">in</span> <span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Name = name ?? <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(name), <span class="string">&quot;Name cannot be null&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> User <span class="title">NewUser</span>(<span class="params"><span class="built_in">string</span>? name</span>)</span> =&gt; <span class="keyword">new</span> User(name!);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Sem este operador o compilador iria mostrar o <strong>warning</strong> abaixo:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;name&#x27; may be null here.</span><br><span class="line"></span><br><span class="line">Possible null reference argument for parameter &#x27;name&#x27; in &#x27;User.User(in string name)&#x27;.</span><br></pre></td></tr></table></figure><p>Neste caso ele não precisaria mostrar este <strong>warning</strong> já que no construtor da classe <code>User</code> tem uma validação se o <code>name</code> é nulo, por isso neste caso podemos usar o operador <code>!</code>.</p><h5 id="Asynchronous-streams-↑"><a href="#Asynchronous-streams-↑" class="headerlink" title="Asynchronous streams ↑"></a>Asynchronous streams <a href="#Index">↑</a></h5><p>Antes.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">UserImporter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task&lt;IEnumerable&lt;User&gt;&gt; Import(<span class="built_in">string</span> path)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">using</span> <span class="keyword">var</span> stream = File.OpenRead(path);</span><br><span class="line">        <span class="keyword">using</span> <span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(stream);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span>? id;</span><br><span class="line">        <span class="keyword">var</span> users = <span class="keyword">new</span> List&lt;User&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((id = <span class="keyword">await</span> reader.ReadLineAsync()) != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            users.Add(<span class="keyword">await</span> GetUserByIdQuery.GetResult(id));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> users;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">UserService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Import</span>(<span class="params"><span class="built_in">string</span> path</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="keyword">var</span> user <span class="keyword">in</span> <span class="keyword">await</span> UserImporter.Import(path))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> InsertUserCommand.Execute(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Depois.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">UserImporter</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> IAsyncEnumerable&lt;User&gt; <span class="title">Import</span>(<span class="params"><span class="built_in">string</span> path</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">using</span> <span class="keyword">var</span> stream = File.OpenRead(path);</span><br><span class="line">        <span class="keyword">using</span> <span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(stream);</span><br><span class="line"></span><br><span class="line">        <span class="built_in">string</span>? id;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> ((id = <span class="keyword">await</span> reader.ReadLineAsync()) != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">yield</span> <span class="keyword">return</span> <span class="keyword">await</span> GetUserByIdQuery.GetResult(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">UserService</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">async</span> Task <span class="title">Import</span>(<span class="params"><span class="built_in">string</span> path</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">await</span> <span class="keyword">foreach</span> (<span class="keyword">var</span> user <span class="keyword">in</span> UserImporter.Import(path))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">await</span> InsertUserCommand.Execute(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Null-coalescing-assignment-↑"><a href="#Null-coalescing-assignment-↑" class="headerlink" title="Null-coalescing assignment ↑"></a>Null-coalescing assignment <a href="#Index">↑</a></h5><p>Antes.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Logger</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">LogInfo</span>(<span class="params"><span class="built_in">string</span>? path, <span class="keyword">in</span> <span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        path = path ?? <span class="string">&quot;logs/.log&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;path&#125;</span> =&gt; <span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Depois.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title">Logger</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">LogInfo</span>(<span class="params"><span class="built_in">string</span>? path, <span class="keyword">in</span> <span class="built_in">string</span> message</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        path ??= <span class="string">&quot;logs/.log&quot;</span>;</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;path&#125;</span> =&gt; <span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Mais-exemplos-↑"><a href="#Mais-exemplos-↑" class="headerlink" title="Mais exemplos ↑"></a>Mais exemplos <a href="#Index">↑</a></h5><p>Abaixo uma lista de projetos que você pode ver as novidades do C# em exemplos reais.</p><p>♟ <a href="https://github.com/jroliveira/chess">Chess</a> é uma console app feita com ASCII art.<br>🐷 <a href="https://github.com/jroliveira/hawk-api">Hawk (api)</a> é sistema de finança pessoal.<br><a href="https://github.com/jroliveira/http-query-filter/">Http.Query.Filter</a> é uma lib para fazer filtros baseado no StrongLoop da IBM.</p><p>Obrigado pela visita 🙂! </p>]]></content:encoded>
      
      
      <category domain="https://jroliveira.net/categories/dev/">dev</category>
      
      
      <category domain="https://jroliveira.net/tags/csharp/">csharp</category>
      
      
      <comments>https://jroliveira.net/pt/csharp-8/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Novidades do C# 7, 7.1, 7.2 e 7.3</title>
      <link>https://jroliveira.net/pt/csharp-7/</link>
      <guid>https://jroliveira.net/pt/csharp-7/</guid>
      <pubDate>Tue, 14 Jul 2020 00:00:00 GMT</pubDate>
      
      <description>Post sobre algumas novidades do C# 7, 7.1, 7.2 e 7.3.</description>
      
      
      
      <content:encoded><![CDATA[<p>Olá, neste artigo eu vou escrever um resumo das novidades que eu acho mais relevantes que vieram no C# nas versões <a href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7">7</a>, <a href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7-1">7.1</a>, <a href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7-2">7.2</a> e <a href="https://docs.microsoft.com/en-us/dotnet/csharp/whats-new/csharp-7-3">7.3</a>.</p><span id="more"></span><h5 id="Index"><a href="#Index" class="headerlink" title="Index:"></a>Index:</h5><ul><li><a href="/pt/csharp-7/#out-Variables-%E2%86%91"><code>out</code> Variables</a>;</li><li><a href="/pt/csharp-7/#Tuples-%E2%86%91">Tuples</a>;</li><li><a href="/pt/csharp-7/#Discards-%E2%86%91">Discards</a>;</li><li><a href="/pt/csharp-7/#Local-functions-%E2%86%91">Local functions</a></li><li><a href="/pt/csharp-7/#Mais-expression-bodied-%E2%86%91">Mais expression-bodied</a></li><li><a href="/pt/csharp-7/#throw-Expressions-%E2%86%91"><code>throw</code> Expressions</a></li><li><a href="/pt/csharp-7/#async-Metodo-Main-%E2%86%91"><code>async</code> Método Main</a></li><li><a href="/pt/csharp-7/#default-Literal-expressions-%E2%86%91"><code>default</code> Literal expressions</a></li><li><a href="/pt/csharp-7/#Argumentos-nomeados-nao-finais-%E2%86%91">Argumentos nomeados não finais</a></li><li><a href="/pt/csharp-7/#Tecnicas-para-escrever-codigo-eficiente-e-seguro-%E2%86%91">Técnicas para escrever código eficiente e seguro</a></li><li><a href="/pt/csharp-7/#Mais-exemplos-%E2%86%91">Mais exemplos</a></li></ul><h5 id="out-Variables-↑"><a href="#out-Variables-↑" class="headerlink" title="out Variables ↑"></a><code>out</code> Variables <a href="#Index">↑</a></h5><p>Antes.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">int</span> result;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">int</span>.TryParse(input, <span class="keyword">out</span> result))</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Depois.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">int</span>.TryParse(input, <span class="keyword">out</span> <span class="keyword">var</span> result))</span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Tuples-↑"><a href="#Tuples-↑" class="headerlink" title="Tuples ↑"></a>Tuples <a href="#Index">↑</a></h5><p>Declaração de variáveis, antes.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="keyword">new</span> Tuple&lt;<span class="built_in">bool</span>, <span class="built_in">string</span>&gt;(<span class="literal">false</span>, <span class="string">&quot;An error has occurred&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;result.Item1&#125;</span>, <span class="subst">&#123;result.Item2&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><p>Depois.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = (Successfully: <span class="literal">false</span>, Message: <span class="string">&quot;An error has occurred&quot;</span>);</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;result.Successfully&#125;</span>, <span class="subst">&#123;result.Message&#125;</span>&quot;</span>);</span><br></pre></td></tr></table></figure><p>Chamada de método, antes.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = DoSomething();</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;result.Item1&#125;</span>, <span class="subst">&#123;result.Item2&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">Tuple&lt;<span class="built_in">bool</span>, <span class="built_in">string</span>&gt; <span class="title">DoSomething</span>()</span> =&gt; <span class="keyword">new</span> Tuple&lt;<span class="built_in">bool</span>, <span class="built_in">string</span>&gt;(<span class="literal">false</span>, <span class="string">&quot;An error has occurred&quot;</span>);</span><br></pre></td></tr></table></figure><p>Depois.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (successfully, message) = DoSomething();</span><br><span class="line">Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;successfully&#125;</span>, <span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line"></span><br><span class="line">(<span class="built_in">bool</span> Successfully, <span class="built_in">string</span> Message) DoSomething() =&gt; (<span class="literal">false</span>, <span class="string">&quot;An error has occurred&quot;</span>);</span><br></pre></td></tr></table></figure><h5 id="Discards-↑"><a href="#Discards-↑" class="headerlink" title="Discards ↑"></a>Discards <a href="#Index">↑</a></h5><ul><li>não aloca memória;</li><li>é write only;</li></ul><p>variáveis <code>out</code> que não serão usadas, antes.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> successfully = <span class="built_in">int</span>.TryParse(input, <span class="keyword">out</span> <span class="keyword">var</span> result);</span><br></pre></td></tr></table></figure><p>Depois.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> successfully = <span class="built_in">int</span>.TryParse(input, <span class="keyword">out</span> _);</span><br></pre></td></tr></table></figure><p>variáveis em <strong>pattern matching</strong> que não serão usadas, antes.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">object</span> n <span class="keyword">when</span> successfully:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Successfully&quot;</span>;</span><br><span class="line">    <span class="literal">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;An error has occurred&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Depois.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="built_in">object</span> _ <span class="keyword">when</span> successfully:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Successfully&quot;</span>;</span><br><span class="line">    <span class="literal">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;An error has occurred&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>variáveis desconstruídas que não serão usadas, antes.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (successfully, message) = DoSomething();</span><br><span class="line"><span class="keyword">if</span> (successfully)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Depois.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (successfully, _) = DoSomething();</span><br><span class="line"><span class="keyword">if</span> (successfully)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Local-functions-↑"><a href="#Local-functions-↑" class="headerlink" title="Local functions ↑"></a>Local functions <a href="#Index">↑</a></h5><ul><li>pode ser <code>async</code>;</li><li>pode usar iterators com <code>yield</code>;</li><li>pode conter outra função local;</li><li>pode conter um bloco ou uma expressão;</li><li>pode ser genérica e pode restringir os tipos genéricos;</li><li>pode usar variáveis e parâmetros genéricos que estejam no escopo da função que ela foi criada;</li><li>pode usar parâmetros <code>ref</code> e <code>out</code>;</li><li>não pode mudar o fluxo da função externa, por exemplo com uso de <code>goto</code>, <code>break</code>, <code>continue</code> e etc;</li><li>não causam alocações locais como declaração de <code>Func</code> ou <code>Action</code>;</li></ul><p>Antes.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogInfo</span>(<span class="params"><span class="keyword">in</span> <span class="built_in">string</span> message</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Log(<span class="string">&quot;Info&quot;</span>, message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Log</span>(<span class="params"><span class="keyword">in</span> <span class="built_in">string</span> level, <span class="keyword">in</span> <span class="built_in">string</span> message</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;level&#125;</span> -&gt; <span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Depois.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">LogInfo</span>(<span class="params"><span class="built_in">string</span> message</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    Log(<span class="string">&quot;Info&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Log</span>(<span class="params"><span class="keyword">in</span> <span class="built_in">string</span> level</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">$&quot;<span class="subst">&#123;level&#125;</span> -&gt; <span class="subst">&#123;message&#125;</span>&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Mais-expression-bodied-↑"><a href="#Mais-expression-bodied-↑" class="headerlink" title="Mais expression-bodied ↑"></a>Mais expression-bodied <a href="#Index">↑</a></h5><p>Esta feature feio da versão 6, e na versão 7 eles adicionaram em <strong>construtures</strong>, <strong>finalizadores</strong> e <strong>propriedades</strong>.</p><p>Antes.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span>(<span class="params"><span class="keyword">in</span> <span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ~User()</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;User finalized.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.name?.ToUpper() ?? <span class="built_in">string</span>.Empty;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Depois.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span>(<span class="params"><span class="keyword">in</span> <span class="built_in">string</span> name</span>)</span> =&gt; <span class="keyword">this</span>.name = name;</span><br><span class="line"></span><br><span class="line">    ~User() =&gt; Console.WriteLine(<span class="string">&quot;User finalized.&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name =&gt; <span class="keyword">this</span>.name?.ToUpper() ?? <span class="built_in">string</span>.Empty;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="throw-Expressions-↑"><a href="#throw-Expressions-↑" class="headerlink" title="throw Expressions ↑"></a><code>throw</code> Expressions <a href="#Index">↑</a></h5><p>Agora podemos utilizar <code>throw</code> em uma operação de null coalesce e em expression bodied members.</p><p>Antes.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">value</span> == <span class="literal">null</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(<span class="keyword">value</span>), <span class="string">&quot;Name cannot be null&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">this</span>.name = <span class="keyword">value</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">get</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Depois.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">string</span> name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">set</span> =&gt; <span class="keyword">this</span>.name = <span class="keyword">value</span> ?? <span class="keyword">throw</span> <span class="keyword">new</span> ArgumentNullException(<span class="keyword">nameof</span>(<span class="keyword">value</span>), <span class="string">&quot;Name cannot be null&quot;</span>);</span><br><span class="line">        <span class="keyword">get</span> =&gt; <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="async-Metodo-Main-↑"><a href="#async-Metodo-Main-↑" class="headerlink" title="async Método Main ↑"></a><code>async</code> Método Main <a href="#Index">↑</a></h5><p>Antes.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt; MainAsync()</span><br><span class="line">        .GetAwaiter()</span><br><span class="line">        .GetResult();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Task <span class="title">MainAsync</span>()</span> =&gt; Task.CompletedTask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Depois.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Task <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> =&gt; Task.CompletedTask;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="default-Literal-expressions-↑"><a href="#default-Literal-expressions-↑" class="headerlink" title="default Literal expressions ↑"></a><code>default</code> Literal expressions <a href="#Index">↑</a></h5><p>Em parâmetros opcionais, antes.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span>(<span class="params"><span class="keyword">in</span> <span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Id = <span class="literal">default</span>(<span class="built_in">uint</span>);</span><br><span class="line">        <span class="keyword">this</span>.Name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">uint</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span> =&gt; <span class="literal">default</span>(<span class="built_in">string</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">UpdateUser</span>(<span class="params"><span class="keyword">in</span> <span class="built_in">uint</span> id, <span class="keyword">in</span> <span class="built_in">string</span> name = <span class="literal">default</span>(<span class="built_in">string</span></span>))</span> =&gt; <span class="keyword">new</span> User(name ?? <span class="keyword">this</span>.Name)</span><br><span class="line">    &#123;</span><br><span class="line">        Id = id,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Depois.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">User</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span>(<span class="params"><span class="keyword">in</span> <span class="built_in">string</span> name</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">this</span>.Id = <span class="literal">default</span>;</span><br><span class="line">        <span class="keyword">this</span>.Name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">uint</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="built_in">string</span> <span class="title">ToString</span>()</span> =&gt; <span class="literal">default</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">UpdateUser</span>(<span class="params"><span class="keyword">in</span> <span class="built_in">uint</span> id, <span class="keyword">in</span> <span class="built_in">string</span> name = <span class="literal">default</span></span>)</span> =&gt; <span class="keyword">new</span> User(name ?? <span class="keyword">this</span>.Name)</span><br><span class="line">    &#123;</span><br><span class="line">        Id = id,</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Argumentos-nomeados-nao-finais-↑"><a href="#Argumentos-nomeados-nao-finais-↑" class="headerlink" title="Argumentos nomeados não finais ↑"></a>Argumentos nomeados não finais <a href="#Index">↑</a></h5><p>Antes.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UpdateUser(id: <span class="number">1</span>, name: name);</span><br></pre></td></tr></table></figure><p>Depois.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UpdateUser(id: <span class="number">1</span>, name);</span><br></pre></td></tr></table></figure><h5 id="Tecnicas-para-escrever-codigo-eficiente-e-seguro-↑"><a href="#Tecnicas-para-escrever-codigo-eficiente-e-seguro-↑" class="headerlink" title="Técnicas para escrever código eficiente e seguro ↑"></a>Técnicas para escrever código eficiente e seguro <a href="#Index">↑</a></h5><p><code>in</code> o parâmetro é passado por referência só que readonly;<br><code>ref</code> o parâmetro é passado por referência read and write;<br><code>ref readonly</code> o retorno do método é por referência e não pode ser alterado;<br><code>struct readonly</code> a estrutura é readonly evitando quando um método é acessado uma cópia desnecessária;<br><code>protected internal</code> permite classes derivadas <strong>ou</strong> no mesmo assembly;<br><code>private protected</code> permite classes derivadas <strong>e</strong> no mesmo assembly;</p><p><strong>nota</strong>: Pattern Matching terá um artigo só para ele, e será sempre atualizado com as novas versões do C#.</p><h5 id="Mais-exemplos-↑"><a href="#Mais-exemplos-↑" class="headerlink" title="Mais exemplos ↑"></a>Mais exemplos <a href="#Index">↑</a></h5><p>Abaixo uma lista de projetos que você pode ver as novidades do C# em exemplos reais.</p><p>♟ <a href="https://github.com/jroliveira/chess">Chess</a> é uma console app feita com ASCII art.<br>🐷 <a href="https://github.com/jroliveira/hawk-api">Hawk (api)</a> é sistema de finança pessoal.<br><a href="https://github.com/jroliveira/http-query-filter/">Http.Query.Filter</a> é uma lib para fazer filtros baseado no StrongLoop da IBM.</p><p>Obrigado pela visita 🙂! </p>]]></content:encoded>
      
      
      <category domain="https://jroliveira.net/categories/dev/">dev</category>
      
      
      <category domain="https://jroliveira.net/tags/csharp/">csharp</category>
      
      
      <comments>https://jroliveira.net/pt/csharp-7/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Criando aplicação web com Nancy</title>
      <link>https://jroliveira.net/pt/criando-aplicacao-web-com-nancy/</link>
      <guid>https://jroliveira.net/pt/criando-aplicacao-web-com-nancy/</guid>
      <pubDate>Sun, 08 Nov 2015 00:00:00 GMT</pubDate>
      
      <description>Post sobre Nancy, o que é, como funciona, quais as vantagens como instalar, como usar e uns exemplos iniciais.</description>
      
      
      
      <content:encoded><![CDATA[<p>Olá pessoal, hoje eu vou falar um pouco sobre <a href="http://nancyfx.org/" target="_blank" rel="external noopener">Nancy</a>.</p><span id="more"></span><p><strong>O que é?</strong></p><p>É um framework leve e simples para construção serviços <strong>HTTP</strong> usando tecnologia <strong>.Net</strong> e <strong>Mono</strong>, e fornece uma <strong>Domain Specific Language (DSL)</strong> para devolver uma resposta de forma simples.<br>Foi projetada para rodar em qualquer lugar, já que ela possui seus próprios objetos de solicitação e resposta.<br>Um dos conceitos fundamentais em Nancy são os hosts. Um host atua como um adaptador para um ambiente de hospedagem, permitindo assim que ela possa ser executada com as tecnologias existentes, como <strong>ASP.NET</strong>, <strong>WCF</strong> e <strong>Owin</strong>, ou integrado em qualquer aplicação.<br>Nancy é um projeto open source, hospedado no GitHub e está licenciado sob a <strong>MIT license</strong>.</p><p><strong>Como instalar?</strong></p><p>Você pode instalar via NuGet, segue a <a href="https://www.nuget.org/profiles/nancyfx" target="_blank" rel="external noopener">lista dos pacotes</a> oficiais da Nancy.<br>Se você vai usar sobre ASP.NET por exemplo, você pode executar o comando abaixo no <strong>Package Manager Console</strong> do Visual Studio.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Package Nancy.Hosting.Aspnet</span><br></pre></td></tr></table></figure><p><strong>Qual problema resolve?</strong></p><ul><li>Não precisa de muitas configurações, ela já vem com algumas definidas.  </li><li>Para adicionar um novo módulo, geralmente é só implementar uma interface e ela já injeta para você via reflection.  </li><li>Existem muitos módulos separados já criados, por exemplo, para trocar o IoC padrão é só instalar o novo e configurar no Boostrapper.</li></ul><p>Com Nancy você precisa se preocupar mais em criar seu aplicativo do que ficar criando código de configuração.</p><p><strong>Alguns exemplos</strong></p><p>Agora vamos criar nosso primeiro exemplo.<br>No Visual Studio na tela de <strong>New Project</strong>, escolha a versão <strong>.NET Framework 4.5</strong>, depois crie um projeto <strong>ASP.NET Empty Web Application</strong>.<br>No <strong>Package Manager Console</strong>, rode o comando <strong>Install-Package Nancy.Hosting.Aspnet</strong>.<br>Agora crie uma classe com o código abaixo.  </p><figure class="highlight csharp"><figcaption><span>HomeModule.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">HomeModule</span> : <span class="title">NancyModule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeModule</span>()</span></span><br><span class="line">    &#123;</span><br><span class="line">        Get[<span class="string">&quot;/&quot;</span>] = _ =&gt; <span class="string">&quot;I&#x27;m working...&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Agora se você rodar a aplicação irá imprimir no navegador.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">I&#x27;m working...</span><br></pre></td></tr></table></figure><p>Para receber uma informação passada na <strong>Query String</strong> é bem simples segue um exemplo abaixo.  </p><figure class="highlight csharp"><figcaption><span>AccountsModule.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AccountsModule</span> : <span class="title">NancyModule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountsModule</span>()</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params"><span class="string">&quot;accounts&quot;</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Get[<span class="string">&quot;/&#123;id&#125;&quot;</span>] = parameters =&gt; GetById(parameters.id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Response <span class="title">GetById</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">new</span></span><br><span class="line">        &#123;</span><br><span class="line">            id,</span><br><span class="line">            name = <span class="string">&quot;Júnior&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response.AsJson(response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Se você for ao navegador e digitar <strong>&#x2F;accounts&#x2F;25</strong> ele irá imprimir o json abaixo.</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">25</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Júnior&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Recebendo os dados de uma requisição <strong>POST</strong>.<br>Note no código que eu usei o código <strong>this.Bind()</strong> para fazer o de para dos dados enviados para a minha classe <strong>AccountModel</strong>.<br>Depois eu apenas gerei um Id randômico e respondi o id fake gerado.</p><figure class="highlight csharp"><figcaption><span>AccountsModule.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AccountsModule</span> : <span class="title">NancyModule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountsModule</span>()</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params"><span class="string">&quot;accounts&quot;</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Get[<span class="string">&quot;/&#123;id&#125;&quot;</span>] = parameters =&gt; GetById(parameters.id);</span><br><span class="line">        Post[<span class="string">&quot;/&quot;</span>] = _ =&gt; Create(<span class="keyword">this</span>.Bind&lt;AccountModel&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Response <span class="title">GetById</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">new</span></span><br><span class="line">        &#123;</span><br><span class="line">            id,</span><br><span class="line">            name = <span class="string">&quot;Júnior&quot;</span></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response.AsJson(response);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Response <span class="title">Create</span>(<span class="params">AccountModel model</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        model.Id = <span class="keyword">new</span> Random().Next(<span class="number">1</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> response = <span class="keyword">new</span></span><br><span class="line">        &#123;</span><br><span class="line">            id = model.Id</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Response.AsJson(response, HttpStatusCode.Created);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AccountModel</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Devolvendo uma página HTML.<br>Para devolver uma página HTML, você precisa criar na raiz do projeto uma pasta chamada <strong>Views</strong>, e dentro dela, uma pasta com o nome igual a da sua rota.<br>No caso eu vou criar um módulo chamado <strong>DocModule</strong> e uma rota para <strong>doc</strong>, logo dentro da pasta <strong>Views</strong> eu vou criar uma pasta <strong>Doc</strong> e colocar o meu arquivo HTML lá dentro.<br>Abaixo o código para devolver o arquivo HTML para o navegador, note que o nome do arquivo que eu estou devolvendo é <strong>index.html</strong>, sendo assim, o nome do arquivo que eu vou criar precisa ser <strong>index.html</strong> também.</p><figure class="highlight csharp"><figcaption><span>DocModules.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DocModules</span> : <span class="title">NancyModule</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DocModules</span>()</span></span><br><span class="line"><span class="function">        : <span class="title">base</span>(<span class="params"><span class="string">&quot;doc&quot;</span></span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Get[<span class="string">&quot;/&quot;</span>] = _ =&gt; View[<span class="string">&quot;index.html&quot;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Obrigado pela visita e até a próxima.</p>]]></content:encoded>
      
      
      <category domain="https://jroliveira.net/categories/dev/">dev</category>
      
      
      <category domain="https://jroliveira.net/tags/csharp/">csharp</category>
      
      <category domain="https://jroliveira.net/tags/nancy/">nancy</category>
      
      
      <comments>https://jroliveira.net/pt/criando-aplicacao-web-com-nancy/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Simple.Data</title>
      <link>https://jroliveira.net/pt/simple-data/</link>
      <guid>https://jroliveira.net/pt/simple-data/</guid>
      <pubDate>Mon, 28 Sep 2015 00:00:00 GMT</pubDate>
      
      <description>Post sobre Simple.Data, o que é, como funciona, quais bancos de dados ele suporta e como faz para realizar as operações nos bancos de dados.</description>
      
      
      
      <content:encoded><![CDATA[<p>Olá pessoal, hoje eu vou falar um pouco sobre <a href="https://github.com/markrendle/Simple.Data" target="_blank" rel="external noopener">Simple.Data</a>.</p><span id="more"></span><p><strong>O que é?</strong></p><p>Simple.Data é um micro framework de acesso a banco de dados baseado no <strong>ActiveRecord</strong> e <strong>DataMapper</strong> do <strong>Ruby</strong>.<br>Ele usa <strong>dynamic</strong> do <strong>.NET 4</strong> para interpretar nomes de método e propriedade em tempo de execução e mapeá-los usando uma abordagem baseada em convenções.</p><p><strong>Como instalar?</strong></p><p>Você pode instalar via NuGet, segue a <a href="https://www.nuget.org/profiles/markrendle?showAllPackages=True" target="_blank" rel="external noopener">lista dos pacotes</a> oficiais do Simple.Data.<br>Se você vai usar no <strong>SQL Server</strong> por exemplo, você pode executar o comando abaixo no <strong>Package Manager Console</strong> do Visual Studio.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Install-Package Simple.Data.SqlServer</span><br></pre></td></tr></table></figure><p><strong>Qual problema resolve?</strong></p><p>Não precisa de muitas linhas de códigos para acessar o banco de dados.<br>Não precisa se preocupar com <strong>SQL injection</strong>.<br>É uma forma <strong>fluente</strong> de escrever as operação que serão feitas no banco de dados.<br>Diferente dos <strong>ORM’s</strong> como [NHibernate][nhibernate], não precisa configurar o mapeamento de tabela para classe.</p><p><strong>Alguns exemplos</strong></p><p><a href="http://simplefx.org/simpledata/docs/pages/Modify/AddingData.html" target="_blank" rel="external noopener">Insert</a>, existem várias formas de inserir um dado usando Simple.Data, abaixo apenas uma das possíveis formas, este exemplo completo está no <a href="https://github.com/jroliveira/url-shortener/blob/master/src/UrlShortener.WebApi/Infrastructure/Data/Commands/Account/CreateCommand.cs" target="_blank" rel="external noopener">GitHub</a>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = Database.OpenNamedConnection(<span class="string">&quot;db&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> account = <span class="keyword">new</span> Account</span><br><span class="line">&#123;</span><br><span class="line">    Name = <span class="string">&quot;Junior&quot;</span>,</span><br><span class="line">    Email = <span class="string">&quot;junior@email.com&quot;</span>,</span><br><span class="line">    Password = <span class="string">&quot;123456&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">db.Accounts.Insert(account);</span><br></pre></td></tr></table></figure><p><a href="http://simplefx.org/simpledata/docs/pages/Modify/UpdatingData.html" target="_blank" rel="external noopener">Update</a>, existem várias formas de atualizar um dado usando Simple.Data, abaixo apenas uma das possíveis formas, este exemplo completo está no <a href="https://github.com/jroliveira/url-shortener/blob/master/src/UrlShortener.WebApi/Infrastructure/Data/Commands/Account/UpdateCommand.cs" target="_blank" rel="external noopener">GitHub</a>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = Database.OpenNamedConnection(<span class="string">&quot;db&quot;</span>);</span><br><span class="line"></span><br><span class="line">Account account = db.Accounts.Get(id);</span><br><span class="line"></span><br><span class="line">account.Name = <span class="string">&quot;Junior Oliveira&quot;</span>;</span><br><span class="line"></span><br><span class="line">db.Accounts.Update(account);</span><br></pre></td></tr></table></figure><p><a href="http://simplefx.org/simpledata/docs/pages/Modify/DeletingData.html" target="_blank" rel="external noopener">Delete</a>, existem várias formas de deletar um dado usando Simple.Data, abaixo apenas uma das possíveis formas.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = Database.OpenNamedConnection(<span class="string">&quot;db&quot;</span>);</span><br><span class="line"></span><br><span class="line">db.Accounts.DeleteById(id);</span><br></pre></td></tr></table></figure><p>Abaixo alguns exemplos mais complexos do que se consegue fazer com Simple.Data.<br>Exemplo usando <a href="http://simplefx.org/simpledata/docs/pages/Retrieve/Commands/All.html" target="_blank" rel="external noopener">All</a>, <a href="http://simplefx.org/simpledata/docs/pages/Retrieve/ColumnSelection.html" target="_blank" rel="external noopener">Select</a>, <a href="http://simplefx.org/simpledata/docs/pages/Retrieve/WhereClauses.html" target="_blank" rel="external noopener">Where</a>, Skip, Take e <a href="http://simplefx.org/simpledata/docs/pages/Retrieve/OrderingResults.html" target="_blank" rel="external noopener">OrderBy</a>, este exemplo completo está no <a href="https://github.com/jroliveira/url-shortener/blob/master/src/UrlShortener.WebApi/Infrastructure/Data/Queries/Account/GetAll.cs" target="_blank" rel="external noopener">GitHub</a>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> db = Database.OpenNamedConnection(<span class="string">&quot;db&quot;</span>);</span><br><span class="line"></span><br><span class="line">List&lt;Account&gt; model = db.Accounts.All()</span><br><span class="line">                                 .Select(</span><br><span class="line">                                     db.Accounts.Id,</span><br><span class="line">                                     db.Accounts.Name,</span><br><span class="line">                                     db.Accounts.Email)</span><br><span class="line">                                 .Skip(_skip.Apply(filter))</span><br><span class="line">                                 .Take(_limit.Apply(filter))</span><br><span class="line">                                 .OrderBy(</span><br><span class="line">                                     db.Accounts.Name);</span><br></pre></td></tr></table></figure><p>Outro exemplo usando <a href="http://simplefx.org/simpledata/docs/pages/Retrieve/LazyLoadingJoins.htm" target="_blank" rel="external noopener">Join ~ On</a>, <a href="http://simplefx.org/simpledata/docs/pages/Retrieve/ColumnAliasing.html" target="_blank" rel="external noopener">As</a>, e FirstOrDefault, este exemplo completo está no <a href="https://github.com/jroliveira/url-shortener/blob/master/src/UrlShortener.WebApi/Infrastructure/Data/Queries/Url/GetByShortened.cs" target="_blank" rel="external noopener">GitHub</a>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dynamic</span> accounts;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = db.Urls.All()</span><br><span class="line">                  .Join(db.Accounts, <span class="keyword">out</span> accounts)</span><br><span class="line">                      .On(db.Urls.AccountId == accounts.Id)</span><br><span class="line">                  .Select(</span><br><span class="line">                      db.Urls.Id,</span><br><span class="line">                      db.Urls.Address,</span><br><span class="line">                      accounts.Id.As(<span class="string">&quot;AccountId&quot;</span>))</span><br><span class="line">                  .Where(</span><br><span class="line">                      db.Urls.Shortened == shortened)</span><br><span class="line">                  .FirstOrDefault();</span><br></pre></td></tr></table></figure><p>Em Simple.Data existem várias formas de fazer uma coisa, segue o site da <a href="http://simplefx.org/simpledata/docs/" target="_blank" rel="external noopener">documentação completa</a>, você pode utilizar a que você achar melhor.<br>Notem que quando eu declaro <code>List&lt;Account&gt; model = ...</code>, o Simple.Data já faz o cast automático para o tipo que eu estou declarando, mas as propriedades e as colunas precisam ter o mesmo nome.<br>No Simple.Data eu não posso utilizar interface para fazer o cast por exemplo <strong>IList</strong> ao invés de <strong>List</strong>.</p><p><strong>Configurando Log de SQL</strong></p><p>No Simple.Data, é possível configurar para ele mostrar o SQL gerado no Output do Visual Studio.<br>É só adicionar as linhas abaixo no <strong>Web.config</strong> de sua aplicação web por exemplo, o exemplo completo está no <a href="https://github.com/jroliveira/url-shortener/blob/master/src/UrlShortener.WebApi/Web.config" target="_blank" rel="external noopener">GitHub</a></p><figure class="highlight xml"><figcaption><span>Web.config</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">system.diagnostics</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">switches</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">name</span>=<span class="string">&quot;Simple.Data&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Information&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">switches</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">system.diagnostics</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Suporte a vários bancos de dados SQL e NoSQL</strong></p><p>Simple.Data consegue fornecer suporte a vários bancos de dados por causa de sua linguagem própria para realizar as operação no banco de dados.</p><p>Atualmente, ele dá suporte para:</p><ul><li>Acesso baseado em ADO para bancos de dados relacionais:</li><li>SQL Server 2005 e versões posterior (incluindo SQL Azure)</li><li>SQL servidor Compact Edition 4.0</li><li>Oracle</li><li>MySQL 4.0 e posterior</li><li>SQLite</li><li>PostgreSQL</li><li>SQLAnywhere</li><li>Informix</li><li>MongoDB</li><li>OData</li></ul><p>O suporte a Azure Table Storage está em desenvolvimento. Simple.Data também suporta Mono na versão 1.0.</p><p>Obrigado pela visita e até a próxima.</p>]]></content:encoded>
      
      
      <category domain="https://jroliveira.net/categories/dev/">dev</category>
      
      
      <category domain="https://jroliveira.net/tags/csharp/">csharp</category>
      
      <category domain="https://jroliveira.net/tags/simpledata/">simpledata</category>
      
      
      <comments>https://jroliveira.net/pt/simple-data/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Jekyll no Windows 7</title>
      <link>https://jroliveira.net/pt/jekyll-no-windows-7/</link>
      <guid>https://jroliveira.net/pt/jekyll-no-windows-7/</guid>
      <pubDate>Sun, 27 Sep 2015 00:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;Olá pessoal, neste post eu vou explicar como instalar o Jekyll no Windows 7.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Olá pessoal, neste post eu vou explicar como instalar o Jekyll no Windows 7.</p><span id="more"></span><p><strong>Instalar o Ruby</strong></p><p>A versão que estou utilizando neste artigo é a <a href="http://dl.bintray.com/oneclick/rubyinstaller/rubyinstaller-2.2.3-x64.exe">Ruby 2.2.3-x64</a>.<br>Após baixar o arquivo, instale no caminho <strong>c:\Ruby22-x64</strong> e selecione a opção <strong>Add Ruby executables to your PATH</strong>.<br>Para verificar se o Ruby foi instalado corretamente, abra o powershell e execute o comando abaixo.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\&gt; ruby -v</span><br><span class="line">ruby 2.2.3p173 (2015-08-18 revision 51636) [x64-mingw32]</span><br></pre></td></tr></table></figure><p><strong>Instalar o DevKit</strong></p><p>A versão que estou utilizando neste artigo é a <a href="http://dl.bintray.com/oneclick/rubyinstaller/DevKit-mingw64-64-4.7.2-20130224-1432-sfx.exe">DevKit-mingw64-64-4.7.2</a>.<br>Após baixar o arquivo, instale no caminho <strong>c:\RubyDevKit</strong>.<br>Após instalar execute no powershell os comandos abaixo.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PS C:\&gt; cd C:\RubyDevKit</span><br><span class="line">PS C:\RubyDevKit&gt; ruby dk.rb init</span><br><span class="line"></span><br><span class="line">Initialization complete! Please review and modify the auto-generated</span><br><span class="line">&#x27;config.yml&#x27; file to ensure it contains the root directories to all</span><br><span class="line">of the installed Rubies you want enhanced by the DevKit.</span><br></pre></td></tr></table></figure><p>Na pasta <strong>c:\RubyDevKit</strong>, abra o arquivo <strong>config.yml</strong> e adicione a linha abaixo no final do arquivo.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">- C:/Ruby22-x64</span><br></pre></td></tr></table></figure><p>Depois execute no powershell o comando abaixo.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS C:\RubyDevKit&gt; ruby dk.rb install</span><br><span class="line">[INFO] Updating convenience notice gem override for &#x27;C:/Ruby22-x64&#x27;</span><br><span class="line">[INFO] Installing &#x27;C:/Ruby22-x64/lib/ruby/site_ruby/devkit.rb&#x27;</span><br></pre></td></tr></table></figure><p>Para verificar se o ruby está rodando corretamente, execute no powershell os comandos abaixo.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PS C:\&gt; gem install json --platform=ruby</span><br><span class="line">Temporarily enhancing PATH to include DevKit...</span><br><span class="line">Building native extensions.  This could take a while...</span><br><span class="line">Successfully installed json-1.8.3</span><br><span class="line">Parsing documentation for json-1.8.3</span><br><span class="line">Installing ri documentation for json-1.8.3</span><br><span class="line">Done installing documentation for json after 1 seconds</span><br><span class="line">1 gem installed</span><br><span class="line">PS C:\&gt; ruby -rubygems -e &quot;require &#x27;json&#x27;; puts JSON.load(&#x27;[42]&#x27;).inspect&quot;</span><br><span class="line">[42]</span><br></pre></td></tr></table></figure><p><strong>Instalar Bundler</strong></p><p>Para instalar o Bundler, execute no powershell o comando abaixo.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">PS C:\&gt; gem install bundler</span><br><span class="line">Fetching: bundler-1.10.6.gem (100%)</span><br><span class="line">Successfully installed bundler-1.10.6</span><br><span class="line">Parsing documentation for bundler-1.10.6</span><br><span class="line">Installing ri documentation for bundler-1.10.6</span><br><span class="line">Done installing documentation for bundler after 4 seconds</span><br><span class="line">1 gem installed</span><br></pre></td></tr></table></figure><p><strong>Instalar o github-pages</strong></p><p>Para instalar a gem do github-pages, primeiro você precisa criar na raiz do projeto um arquivo chamado <strong>Gemfile</strong>.<br>Depois de criar o arquivo, adicione as linhas abaixo.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source &#x27;https://rubygems.org&#x27;</span><br><span class="line"></span><br><span class="line">gem &#x27;github-pages&#x27;</span><br></pre></td></tr></table></figure><p>Após adicionar as linhas acima no arquivo, vá ao powershell e execute o comando abaixo na raiz do projeto.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">PS C:\projetos\jroliveira.github.io&gt; bundle install</span><br><span class="line">Fetching gem metadata from https://rubygems.org/............</span><br><span class="line">Fetching version metadata from https://rubygems.org/...</span><br><span class="line">Fetching dependency metadata from https://rubygems.org/..</span><br><span class="line">Resolving dependencies...</span><br><span class="line">Installing RedCloth 4.2.9 with native extensions</span><br><span class="line">Installing i18n 0.7.0</span><br><span class="line">Using json 1.8.3</span><br><span class="line">Installing minitest 5.8.1</span><br><span class="line">Installing thread_safe 0.3.5</span><br><span class="line">Installing tzinfo 1.2.2</span><br><span class="line">Installing activesupport 4.2.4</span><br><span class="line">Installing addressable 2.3.8</span><br><span class="line">Installing blankslate 2.1.2.4</span><br><span class="line">Installing fast-stemmer 1.0.2 with native extensions</span><br><span class="line">Installing classifier-reborn 2.0.3</span><br><span class="line">Installing coffee-script-source 1.9.1.1</span><br><span class="line">Installing execjs 2.6.0</span><br><span class="line">Installing coffee-script 2.4.1</span><br><span class="line">Installing colorator 0.1</span><br><span class="line">Installing ffi 1.9.10</span><br><span class="line">Installing ethon 0.8.0</span><br><span class="line">Installing gemoji 2.1.0</span><br><span class="line">Installing net-dns 0.8.0</span><br><span class="line">Installing public_suffix 1.5.1</span><br><span class="line">Installing typhoeus 0.8.0</span><br><span class="line">Installing github-pages-health-check 0.5.3</span><br><span class="line">Installing jekyll-coffeescript 1.0.1</span><br><span class="line">Installing jekyll-gist 1.3.4</span><br><span class="line">Installing jekyll-paginate 1.1.0</span><br><span class="line">Installing sass 3.4.18</span><br><span class="line">Installing jekyll-sass-converter 1.3.0</span><br><span class="line">Installing rb-fsevent 0.9.6</span><br><span class="line">Installing rb-inotify 0.9.5</span><br><span class="line">Installing listen 3.0.3</span><br><span class="line">Installing jekyll-watch 1.3.0</span><br><span class="line">Installing kramdown 1.5.0</span><br><span class="line">Installing liquid 2.6.2</span><br><span class="line">Installing mercenary 0.3.5</span><br><span class="line">Installing posix-spawn 0.3.11 with native extensions</span><br><span class="line">Installing yajl-ruby 1.2.1 with native extensions</span><br><span class="line">Installing pygments.rb 0.6.3</span><br><span class="line">Installing redcarpet 3.3.2 with native extensions</span><br><span class="line">Installing safe_yaml 1.0.4</span><br><span class="line">Installing parslet 1.5.0</span><br><span class="line">Installing toml 0.1.2</span><br><span class="line">Installing jekyll 2.4.0</span><br><span class="line">Installing jekyll-feed 0.3.1</span><br><span class="line">Installing mini_portile 0.6.2</span><br><span class="line">Installing nokogiri 1.6.6.2</span><br><span class="line">Installing html-pipeline 1.9.0</span><br><span class="line">Installing jekyll-mentions 0.2.1</span><br><span class="line">Installing jekyll-redirect-from 0.8.0</span><br><span class="line">Installing jekyll-sitemap 0.8.1</span><br><span class="line">Installing jemoji 0.5.0</span><br><span class="line">Installing maruku 0.7.0</span><br><span class="line">Installing rdiscount 2.1.7 with native extensions</span><br><span class="line">Installing terminal-table 1.5.2</span><br><span class="line">Installing github-pages 39</span><br><span class="line">Using bundler 1.10.6</span><br><span class="line">Bundle complete! 1 Gemfile dependency, 55 gems now installed.</span><br><span class="line">Use `bundle show [gemname]` to see where a bundled gem is installed.</span><br><span class="line">Post-install message from nokogiri:</span><br><span class="line">Nokogiri is built with the packaged libraries: libxml2-2.9.2, libxslt-1.1.28, zl</span><br><span class="line">ib-1.2.8, libiconv-1.14.</span><br><span class="line">Post-install message from html-pipeline:</span><br><span class="line">-------------------------------------------------</span><br><span class="line">Thank you for installing html-pipeline!</span><br><span class="line">You must bundle Filter gem dependencies.</span><br><span class="line">See html-pipeline README.md for more details.</span><br><span class="line">https://github.com/jch/html-pipeline#dependencies</span><br><span class="line">-------------------------------------------------</span><br></pre></td></tr></table></figure><p><strong>Instalar o Python</strong></p><p>A versão que estou utilizando neste artigo é a <a href="https://www.python.org/ftp/python/2.7.10/python-2.7.10.amd64.msi">python-2.7.10.amd64</a>.<br>Após baixar o arquivo, instale no caminho <strong>C:\Python27</strong> e selecione a opção <strong>Add python.exe to PATH</strong>.<br>Para verificar se o Python foi instalado corretamente, feche e abre o powershell e execute o comando abaixo.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\&gt; python --version</span><br><span class="line">Python 2.7.10</span><br></pre></td></tr></table></figure><p><strong>Instalar o Easy Install</strong></p><p>Baixe o arquivo <a href="https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py">ez_setup.py</a> no <strong>C:</strong>, depois rode o comando abaixo no powershell.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PS C:\&gt; python &quot;C:\ez_setup.py&quot;</span><br><span class="line"></span><br><span class="line">Installed c:\python27\lib\site-packages\setuptools-18.3.2-py2.7.egg</span><br><span class="line">Processing dependencies for setuptools==18.3.2</span><br><span class="line">Finished processing dependencies for setuptools==18.3.2</span><br></pre></td></tr></table></figure><p>Para verificar se o Easy Install foi instalado corretamente, execute o comando abaixo no powershell.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS C:\&gt; easy_install --version</span><br><span class="line">setuptools 18.3.2 from c:\python27\lib\site-packages\setuptools-18.3.2-py2.7.egg (Python 2.7)</span><br></pre></td></tr></table></figure><p><strong>Instalar o Pygments</strong></p><p>Para instalar, execute o comando abaixo no powershell.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">PS C:\&gt; easy_install Pygments</span><br><span class="line">Searching for Pygments</span><br><span class="line">Reading https://pypi.python.org/simple/Pygments/</span><br><span class="line">Best match: Pygments 2.0.2</span><br><span class="line">Downloading https://pypi.python.org/packages/source/P/Pygments/Pygments-2.0.2.ta</span><br><span class="line">r.gz#md5=238587a1370d62405edabd0794b3ec4a</span><br><span class="line">Processing Pygments-2.0.2.tar.gz</span><br><span class="line">Writing c:\users\cliente\appdata\local\temp\easy_install-bzfr0n\Pygments-2.0.2\s</span><br><span class="line">etup.cfg</span><br><span class="line">Running Pygments-2.0.2\setup.py -q bdist_egg --dist-dir c:\users\cliente\appdata</span><br><span class="line">\local\temp\easy_install-bzfr0n\Pygments-2.0.2\egg-dist-tmp-anbmeh</span><br><span class="line">creating c:\python27\lib\site-packages\pygments-2.0.2-py2.7.egg</span><br><span class="line">Extracting pygments-2.0.2-py2.7.egg to c:\python27\lib\site-packages</span><br><span class="line">Adding pygments 2.0.2 to easy-install.pth file</span><br><span class="line">Installing pygmentize-script.py script to C:\Python27\Scripts</span><br><span class="line">Installing pygmentize.exe script to C:\Python27\Scripts</span><br><span class="line"></span><br><span class="line">Installed c:\python27\lib\site-packages\pygments-2.0.2-py2.7.egg</span><br><span class="line">Processing dependencies for Pygments</span><br><span class="line">Finished processing dependencies for Pygments</span><br></pre></td></tr></table></figure><p>Obrigado pela visita, e até a próxima.</p>]]></content:encoded>
      
      
      <category domain="https://jroliveira.net/categories/dev/">dev</category>
      
      
      <category domain="https://jroliveira.net/tags/jekyll/">jekyll</category>
      
      
      <comments>https://jroliveira.net/pt/jekyll-no-windows-7/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>NHibernate</title>
      <link>https://jroliveira.net/pt/nhibernate/</link>
      <guid>https://jroliveira.net/pt/nhibernate/</guid>
      <pubDate>Wed, 25 Jun 2014 00:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;Olá pessoal, depois de um tempo parado, vamos falar um pouco de &lt;strong&gt;NHibernate&lt;/strong&gt;.&lt;br&gt;Este post estava pronto a bastante tempo pode ser que alguma coisa não seja mais aplicado nas novas versão do NHibernate.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Olá pessoal, depois de um tempo parado, vamos falar um pouco de <strong>NHibernate</strong>.<br>Este post estava pronto a bastante tempo pode ser que alguma coisa não seja mais aplicado nas novas versão do NHibernate.</p><span id="more"></span><p><strong>Instalando</strong></p><p>A forma mais simples de instalar o NHibernate é usando o <a href="http://nuget.org/" target="_blank" rel="external noopener">NuGet</a>, abaixo o comando para instalar o NHibernate. No exemplo estou usando a versão <strong>3.3.3.4000</strong> para o <strong>.NET Framework 4.0</strong>.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">install-package NHibernate</span><br></pre></td></tr></table></figure><p><strong>Configurando</strong></p><p>Adicione um arquivo XML na solução chamado <strong>hibernate.cfg.xml</strong>.<br>Este arquivo irá conter as especificações de conexão a base de dados e outras configurações da conexão.<br>Abaixo segue uma configuração padrão para o banco <strong>MySQL</strong> e uma aplicação Web:</p><figure class="highlight xml"><figcaption><span>hibernate.cfg.xml</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&#x27;1.0&#x27; encoding=&#x27;utf-8&#x27;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-configuration</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:nhibernate-configuration-2.2&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">session-factory</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connection.provider&quot;</span>&gt;</span></span><br><span class="line">      NHibernate.Connection.DriverConnectionProvider, NHibernate</span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;connection.connection_string_name&quot;</span>&gt;</span></span><br><span class="line">      ConnectionString</span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dialect&quot;</span>&gt;</span></span><br><span class="line">      NHibernate.Dialect.MySQLDialect</span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;current_session_context_class&quot;</span>&gt;</span></span><br><span class="line">      web</span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">session-factory</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Link com a lista de <a href="http://nhforge.org/doc/nh/en/#configuration-optional" target="_blank" rel="external noopener">propriedades de configuração</a> do NHibernate.</p><p><strong>Domínio</strong></p><p>O domínio abaixo é uma representação de uma conta de jogador, retirada do projeto <a href="https://github.com/junioro/dolrath" target="_blank" rel="external noopener">Dolrath</a> e adaptada para ficar mais didática.</p><figure class="highlight csharp"><figcaption><span>Account.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Account</span> : <span class="title">Entity</span>&lt;<span class="title">int</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">string</span> Email &#123; <span class="keyword">get</span>; <span class="keyword">protected</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">string</span> Password &#123; <span class="keyword">get</span>; <span class="keyword">protected</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">string</span> Name &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">virtual</span> <span class="built_in">string</span> Surname &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Account</span>()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span>(<span class="params"><span class="built_in">string</span> email, <span class="built_in">string</span> password</span>)</span> &#123;</span><br><span class="line">        Email = email;</span><br><span class="line">        Password = password;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">NewPassword</span>()</span> &#123;</span><br><span class="line">        Password = Guid.NewGuid().ToString().Substring(<span class="number">0</span>, <span class="number">5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Alguns pontos importantes ao notar o domínio é a presença do modificador <strong>virtual</strong> nos métodos e propriedades, este modificador possibilita o NHibernate criar um proxy sobre a nossa classe e que não existe nenhuma presença de infraestrutura de acesso a dados.</p><p><strong>Mapeamento</strong></p><p>O mapeamento abaixo esta escrito em XML, existem outras formas de mapeamento como por exemplo atributos ou por código usando <a href="http://www.fluentnhibernate.org/" target="_blank" rel="external noopener">NHibernate Fluent</a>. Uma vantagens que eu vejo ao usar XML é que você não precisa recompilar a aplicação para alterar alguma regra no mapeamento e a forma de utilização ao meu ver é mais simples e didática.</p><p>Abaixo esta o mapeamento da nossa classe de domínio acima.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">hibernate-mapping</span> <span class="attr">xmlns</span>=<span class="string">&quot;urn:nhibernate-mapping-2.2&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">assembly</span>=<span class="string">&quot;Dolrath&quot;</span></span></span><br><span class="line"><span class="tag">                   <span class="attr">namespace</span>=<span class="string">&quot;Dolrath.Domain.Entities&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;Account&quot;</span> <span class="attr">table</span>=<span class="string">&quot;Accounts&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;Id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Int32&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;hilo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">length</span>=<span class="string">&quot;100&quot;</span> <span class="attr">not-null</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Password&quot;</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">length</span>=<span class="string">&quot;100&quot;</span> <span class="attr">not-null</span>=<span class="string">&quot;true&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">length</span>=<span class="string">&quot;100&quot;</span> <span class="attr">not-null</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;Surname&quot;</span> <span class="attr">type</span>=<span class="string">&quot;string&quot;</span> <span class="attr">length</span>=<span class="string">&quot;100&quot;</span> <span class="attr">not-null</span>=<span class="string">&quot;false&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">hibernate-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Uma das configurações mais importantes deste mapeamento é o gerador da chave primária, neste exemplo estou usando <strong>hilo</strong>, ele é usado para gerar a chave sem precisar ir até a base de dados não quebramos a <a href="http://martinfowler.com/eaaCatalog/unitOfWork.html" target="_blank" rel="external noopener">Unit Of Work</a>.</p><p>Click no elemento abaixo para maiores detalhes de seus atributos.</p><p><a href="http://nhforge.org/doc/nh/en/#mapping-declaration-mapping" target="_blank" rel="external noopener">hibernate-mapping</a><br><a href="http://nhforge.org/doc/nh/en/#mapping-declaration-class" target="_blank" rel="external noopener">class</a><br><a href="http://nhforge.org/doc/nh/en/#mapping-declaration-id" target="_blank" rel="external noopener">id</a><br><a href="http://nhforge.org/doc/nh/en/#mapping-declaration-property" target="_blank" rel="external noopener">property</a></p><p><strong>Relações</strong></p><p>Abaixo as duas formas de fazer uma relação de <strong>N para N</strong> (<a href="http://nhforge.org/doc/nh/en/#collections-ofvalues" target="_blank" rel="external noopener">many-to-many</a>).</p><p><strong>bag</strong>: É usado quando temos uma situação onde a coleção pode haver valores duplicados.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;Order&quot;</span> <span class="attr">table</span>=<span class="string">&quot;tbOrder&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;Id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;OrderId&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;identity&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bag</span> <span class="attr">name</span>=<span class="string">&quot;Items&quot;</span> <span class="attr">inverse</span>=<span class="string">&quot;true&quot;</span> <span class="attr">cascade</span>=<span class="string">&quot;all&quot;</span> <span class="attr">access</span>=<span class="string">&quot;field.camelcase-underscore&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">&quot;OrderId&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">one-to-many</span> <span class="attr">class</span>=<span class="string">&quot;OrderItem&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bag</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>set</strong>: É usado quando temos uma situação onde a coleção não pode haver valores duplicados.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;Character&quot;</span> <span class="attr">table</span>=<span class="string">&quot;Characters&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;Id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Int32&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;hilo&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">set</span> <span class="attr">name</span>=<span class="string">&quot;Inventory&quot;</span> <span class="attr">lazy</span>=<span class="string">&quot;true&quot;</span> <span class="attr">access</span>=<span class="string">&quot;field.camelcase-underscore&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">key</span> <span class="attr">column</span>=<span class="string">&quot;CharacterId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">many-to-many</span> <span class="attr">class</span>=<span class="string">&quot;Item&quot;</span> <span class="attr">column</span>=<span class="string">&quot;ItemId&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Relação de <strong>N para 1</strong> (<a href="http://nhforge.org/doc/nh/en/#mapping-declaration-manytoone" target="_blank" rel="external noopener">many-to-one</a>).</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;Character&quot;</span> <span class="attr">table</span>=<span class="string">&quot;Characters&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;Id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Int32&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;hilo&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">many-to-one</span> <span class="attr">name</span>=<span class="string">&quot;Account&quot;</span> <span class="attr">unique</span>=<span class="string">&quot;true&quot;</span> <span class="attr">column</span>=<span class="string">&quot;AccountId&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Relação de <strong>1 para 1</strong> (<a href="http://nhforge.org/doc/nh/en/#mapping-declaration-onetoone" target="_blank" rel="external noopener">one-to-one</a>).</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;Account&quot;</span> <span class="attr">table</span>=<span class="string">&quot;Accounts&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;Id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Int32&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;hilo&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">one-to-one</span> <span class="attr">name</span>=<span class="string">&quot;Character&quot;</span> <span class="attr">class</span>=<span class="string">&quot;Character&quot;</span> <span class="attr">cascade</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Outras configurações</strong></p><p><a href="http://nhforge.org/doc/nh/en/#mapping-declaration-discriminator" target="_blank" rel="external noopener">Discriminator</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">class</span> <span class="attr">name</span>=<span class="string">&quot;Character&quot;</span> <span class="attr">table</span>=<span class="string">&quot;Characters&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">name</span>=<span class="string">&quot;Id&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Int32&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">generator</span> <span class="attr">class</span>=<span class="string">&quot;hilo&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">discriminator</span> <span class="attr">column</span>=<span class="string">&quot;Discriminator&quot;</span> <span class="attr">not-null</span>=<span class="string">&quot;true&quot;</span><span class="attr">type</span>=<span class="string">&quot;string&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">subclass</span> <span class="attr">name</span>=<span class="string">&quot;Humano&quot;</span> <span class="attr">discriminator-value</span>=<span class="string">&quot;Humano&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">subclass</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">subclass</span> <span class="attr">name</span>=<span class="string">&quot;Elf&quot;</span> <span class="attr">discriminator-value</span>=<span class="string">&quot;Elf&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">subclass</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">subclass</span> <span class="attr">name</span>=<span class="string">&quot;Draconiano&quot;</span> <span class="attr">discriminator-value</span>=<span class="string">&quot;Draconiano&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">subclass</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">subclass</span> <span class="attr">name</span>=<span class="string">&quot;Metamorfo&quot;</span> <span class="attr">discriminator-value</span>=<span class="string">&quot;Metamorfo&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">subclass</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">class</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>Session Factory</strong></p><p>A <strong>Session Factory</strong> é responsável por construir as sessões.<br>Quando uma aplicação é iniciada deve-se carregar todas as configurações do NHibernate e mapeamentos para criar a Session Factory, a criação da Session Factory é um processo demorado e deve ser feito apenas uma vez na aplicação.<br>O código abaixo é uma implementação do padrão <a href="http://www.dofactory.com/Patterns/PatternSingleton.aspx" target="_blank" rel="external noopener">Singleton</a> e garante que a Session Factory será criada apenas uma vez na aplicação.</p><figure class="highlight csharp"><figcaption><span>SessionFactoryFactory.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">sealed</span> <span class="keyword">class</span> <span class="title">SessionFactoryFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ISessionFactory _sessionFactory;</span><br><span class="line">    <span class="keyword">public</span> ISessionFactory CurrentSessionFactory &#123; <span class="keyword">get</span> &#123; <span class="keyword">return</span> _sessionFactory; &#125; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> SessionFactoryFactory _instance;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">readonly</span> <span class="built_in">object</span> SyncRoot = <span class="keyword">new</span> Object();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SessionFactoryFactory</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> cfg = <span class="keyword">new</span> Configuration();</span><br><span class="line">        cfg.Configure();</span><br><span class="line">        cfg.AddAssembly(<span class="keyword">typeof</span>(SessionFactoryFactory).Assembly);</span><br><span class="line"></span><br><span class="line">        _sessionFactory = cfg.BuildSessionFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> SessionFactoryFactory Instance &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (_instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">lock</span> (SyncRoot) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (_instance == <span class="literal">null</span>)</span><br><span class="line">                        _instance = <span class="keyword">new</span> SessionFactoryFactory();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> _instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Action Filter - Transaction Per Request</strong></p><p>Exitem várias formas de criar uma <strong>session</strong> em uma aplicação web a forma que irei adotar é bem comum, ela cria uma session por cada requisição feita.</p><p>Simplesmente vamos criar um <strong>action filter</strong> que irá interceptar a “entrada” e a “saída” da nossa <strong>action</strong> da <strong>controller</strong>.</p><p>Na entrada vamos pegar a session usando o <strong>contêiner de dependência</strong> e iniciar uma transação setando o <strong>nível de isolamento</strong> da mesma.<br>Lista dos <a href="http://msdn.microsoft.com/pt-br/library/system.data.isolationlevel.aspx" target="_blank" rel="external noopener">níveis de isolamentos</a>.</p><p>Na saída vamos verificar se houve um erro na requisição. Caso não houve um erro a transação será feito um <strong>commit</strong> da transação, senão será feito um <strong>rollback</strong> na mesma.</p><p>No final a Session será destruída.</p><figure class="highlight csharp"><figcaption><span>TransactionPerRequestAttribute.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Method, AllowMultiple = false)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TransactionPerRequestAttribute</span> : <span class="title">ActionFilterAttribute</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IsolationLevel _isolationLevel;</span><br><span class="line">    <span class="keyword">private</span> ISession _session;</span><br><span class="line">    <span class="keyword">private</span> ITransaction _transaction;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TransactionPerRequestAttribute</span>(<span class="params">IsolationLevel isolationLevel = IsolationLevel.ReadUncommitted</span>)</span> &#123;</span><br><span class="line">        _isolationLevel = isolationLevel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnActionExecuting</span>(<span class="params">ActionExecutingContext filterContext</span>)</span> &#123;</span><br><span class="line">        _session = IoCContainer.Get&lt;ISession&gt;();</span><br><span class="line">        _transaction = _session.BeginTransaction(_isolationLevel);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnActionExecuted</span>(<span class="params">ActionExecutedContext filterContext</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (filterContext.Exception == <span class="literal">null</span>)</span><br><span class="line">            _transaction.Commit();</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            _transaction.Rollback();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Action Filter - NHibernate Session</strong></p><p>Este <strong>actino filter</strong> será utilizado para poder acoplar e desacoplar a session do NHibernate no contexto atual, para ficar mais simples a utilização vamos registrar ele no <strong>global filter</strong> assim não precisamos decorar a nossa action com esta anotação.</p><figure class="highlight csharp"><figcaption><span>FilterConfig.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FilterConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">RegisterGlobalFilters</span>(<span class="params">GlobalFilterCollection filters</span>)</span> &#123;</span><br><span class="line">        filters.Add(<span class="keyword">new</span> HandleErrorAttribute());</span><br><span class="line">        filters.Add(<span class="keyword">new</span> NHibernateSessionAttribute());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[<span class="meta">AttributeUsage(AttributeTargets.Method, AllowMultiple = false)</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">NHibernateSessionAttribute</span> : <span class="title">ActionFilterAttribute</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnActionExecuting</span>(<span class="params">ActionExecutingContext filterContext</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!CurrentSessionContext.HasBind(SessionFactoryFactory.Instance.CurrentSessionFactory)) &#123;</span><br><span class="line">            CurrentSessionContext.Bind(IoCContainer.Get&lt;ISession&gt;());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">OnActionExecuted</span>(<span class="params">ActionExecutedContext filterContext</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> currentSession = CurrentSessionContext.Unbind(SessionFactoryFactory.Instance.CurrentSessionFactory);</span><br><span class="line">        <span class="keyword">if</span> (currentSession == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        currentSession.Close();</span><br><span class="line">        currentSession.Dispose();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Controller</strong></p><p>Notem que estou recebendo a session no construtor da controller, quem irá fornecer esta session será o contêiner de dependência.<br>A <strong>action create</strong> do método <strong>post</strong> esta decorada com a anotação <strong>TransactionPerRequest</strong>, isto indica que esta action terá um controle de transação.</p><figure class="highlight csharp"><figcaption><span>AccountController.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AccountController</span> : <span class="title">BaseController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ISession _session;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountController</span>(<span class="params">ISession session</span>)</span> &#123;</span><br><span class="line">        _session = session;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpGet</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Create</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpPost</span>]</span><br><span class="line">    [<span class="meta">TransactionPerRequest</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Create</span>(<span class="params">CreateViewModel viewModel</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ModelState.IsValid) <span class="keyword">return</span> Error(<span class="string">&quot;Existem campos para preencher.&quot;</span>, View(viewModel));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> account = <span class="keyword">new</span> Account(viewModel.Email, viewModel.Password);</span><br><span class="line">        _session.Save(account);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Information(<span class="string">&quot;Sua conta foi criada com sucesso.&quot;</span>, RedirectToAction(<span class="string">&quot;Index&quot;</span>, <span class="string">&quot;Home&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Existem várias formas de buscar dados usando NHibernate segue alguns abaixo:</p><p><a href="http://nhforge.org/doc/nh/en/#querycriteria" target="_blank" rel="external noopener">Criteria Queries</a></p><figure class="highlight csharp"><figcaption><span>AccountGetByIdQuery.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AccountGetByIdQuery</span> : <span class="title">IQuery</span>&lt;<span class="title">Account</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ISession _session;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountGetByIdQuery</span>(<span class="params">ISession session</span>)</span> &#123;</span><br><span class="line">        _session = session;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">GetResult</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _session.CreateCriteria&lt;Account&gt;()</span><br><span class="line">                        .Add(Restrictions.Eq(<span class="string">&quot;Id&quot;</span>, Id))</span><br><span class="line">                        .UniqueResult&lt;Account&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://nhforge.org/doc/nh/en/#queryqueryover" target="_blank" rel="external noopener">QueryOver Queries</a></p><figure class="highlight csharp"><figcaption><span>AccountGetByEmailQuery.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AccountGetByEmailQuery</span> : <span class="title">IQuery</span>&lt;<span class="title">Account</span>&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ISession _session;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">string</span> Email &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AccountGetByEmailQuery</span>(<span class="params">ISession session</span>)</span> &#123;</span><br><span class="line">        _session = session;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">virtual</span> Account <span class="title">GetResult</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _session.QueryOver&lt;Account&gt;()</span><br><span class="line">                        .Where(c =&gt; c.Email == Email)</span><br><span class="line">                        .SingleOrDefault&lt;Account&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="http://nhforge.org/doc/nh/en/#querysql" target="_blank" rel="external noopener">Native SQL</a></p><figure class="highlight csharp"><figcaption><span>ItemResultGetAllQuery.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ItemResultGetAllQuery</span> : <span class="title">IQuery</span>&lt;<span class="title">IEnumerable</span>&lt;<span class="title">ItemResult</span>&gt;&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> ISession _session;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ItemResultGetAllQuery</span>(<span class="params">ISession session</span>)</span> &#123;</span><br><span class="line">        _session = session;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IEnumerable</span>&lt;<span class="title">ItemResult</span>&gt; <span class="title">GetResult</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> _session.CreateSQLQuery(<span class="string">&quot;SELECT Id, Name, Type FROM Items&quot;</span>)</span><br><span class="line">                        .SetResultTransformer(Transformers.AliasToBean&lt;ItemResult&gt;())</span><br><span class="line">                        .List&lt;ItemResult&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Obrigado pela visita e espero que tenha gostado, até a próxima.</p>]]></content:encoded>
      
      
      <category domain="https://jroliveira.net/categories/dev/">dev</category>
      
      
      <category domain="https://jroliveira.net/tags/csharp/">csharp</category>
      
      <category domain="https://jroliveira.net/tags/nhibernate/">nhibernate</category>
      
      <category domain="https://jroliveira.net/tags/singleton/">singleton</category>
      
      
      <comments>https://jroliveira.net/pt/nhibernate/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TDD (Test Driven Development)</title>
      <link>https://jroliveira.net/pt/tdd/</link>
      <guid>https://jroliveira.net/pt/tdd/</guid>
      <pubDate>Tue, 05 Mar 2013 00:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;Olá pessoal! Hoje vou falar um pouco sobre TDD.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Teoria&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;TDD (Test Driven Development) é a técnica que consiste em codificar os testes antes de qualquer codificação de melhoria ou nova funcionalidade.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Olá pessoal! Hoje vou falar um pouco sobre TDD.</p><p><strong>Teoria</strong></p><p>TDD (Test Driven Development) é a técnica que consiste em codificar os testes antes de qualquer codificação de melhoria ou nova funcionalidade.</p><span id="more"></span><p>Testes unitários são códigos que executam (testam) uma única unidade de código, verificando se o mesmo foi escrito corretamente. São rápidos de serem executados provendo um resultado quase que imediato e de forma automatizada.</p><p><strong>Vantagens</strong></p><p>TDD auxilia no design de nossa classe, pois quando iniciamos pelo teste estamos iniciando por quem irá utiliza-la, desta forma podemos definir melhor como será a implementação de acordo com a forma que estamos utilizando a nossa classe.</p><p>Testes unitários podem auxiliar na codificação, pois eles devem ser simples de escrever e com poucas linhas. Se está complicado de fazê-lo, existe algo de errado com o código a ser testado ou com a lógica emprega, neste caso, refatore.</p><p>Podemos fazer uma refatoração de qualquer proporção no código que os testes vão avisar caso alguma coisa não está mais cumprindo o que foi definido.</p><p>A partir dos testes podemos ver exatamente como a nossa classe foi construída, conseguindo saber como cada regra foi garantida e como utilizar a classe testada.</p><p>Os testes acabam sendo uma documentação executável do código.</p><p><strong>Organização</strong></p><p>O teste seguirá basicamente o padrão AAA (Arrange, Act, Asset):</p><p>Arrange: É a configuração do ambiente antes de executar o teste.</p><p>Act: É a execução do método a ser testado.</p><p>Assert: É o que garante que determinada funcionalidade foi desenvolvida.</p><p><strong>Etapas</strong></p><p>O TDD é composto por três etapas muito simples que são basicamente: Vermelho, Verde e Refatorar.</p><p>Vermelho: É a etapa na qual o teste não está passando; simplesmente é quando iremos definir como o nosso método será executado e quando definimos a nossa assertiva.</p><p>Obs.: Em TDD temos sempre que começar pelo teste mais fácil.</p><p>Verde: É a etapa na qual o teste passa; temos que fazer o teste passar da forma mais simples e rápida.</p><p>Obs.: Em TDD é necessário sempre simular antes de construir a implementação real da classe. Esta técnica ajuda a entender melhor o problema e nos dá mais tempo para elaborar a implementação do código e, em TDD, você deve fazer apenas o necessário para o teste passar.</p><p>Refatorar: É a etapa na qual iremos melhorar a implementação do código da classe.</p><p>Obs.: Todos os testes que estavam passando na etapa anterior devem continuar passando após a etapa de refatoração, por isto é muito importante sempre executar todos os testes e não apenas o que você está codificando.</p><p><strong>Dicas</strong></p><p>Lista de teste: Antes de implementar nossos testes, será sempre melhor, elaborar uma lista de teste, assim podemos guiar o desenvolvimento da nossa classe de teste a partir desta lista. Além de ser um plano de desenvolvimento da classe, a lista de teste também nos ajuda a escolher qual será o teste mais fácil de ser implementado.</p><p>Passos de bebê: Note que em TDD sempre desenvolvendo o nosso código pouco a pouco, seguindo as três etapas acima. Esta técnica é chamada de passos de bebê, desta forma, garantimos, que cada item da nossa lista de teste está correto até chegar à implementação final da nossa classe, o resultado será um código bem feito e simples, apenas para atender a real necessidade do problema.</p><p>Triangulação: Mesmo tendo certeza que o teste irá passar, é sempre recomendada a triangulação, ou seja, fazer testes com corpos parecidos, porém, com dados diferentes, para ter certeza que a regra esta sendo cumprida corretamente.</p><p>Nomes objetivos: Nossas classes de teste bem como os nossos testes devem conter um nome que representa claramente o que será feito, pois o nosso projeto de teste também pode ser usando como uma documentação executável, assim, qualquer pessoa que ver este teste saberá exatamente o que está sendo testado.</p><p>Uma assertiva por teste: Cada teste terá apenas um método de assertividade, assim, quando um teste falhar será possível saber exatamente qual foi o problema e o que há de errado com o método.</p><p>Criando um cenário antes de codificar: Caso haja uma situação na qual o teste não passe, deve-se criar um teste para esta situação. Isto vale também para uma situação em produção, imagina que acorra um bug no sistema, você criará um teste para simular o erro antes de implementar a solução.</p><p>Obrigado pela visita e espero que tenha gostado, até a próxima.</p>]]></content:encoded>
      
      
      <category domain="https://jroliveira.net/categories/dev/">dev</category>
      
      
      <category domain="https://jroliveira.net/tags/tdd/">tdd</category>
      
      
      <comments>https://jroliveira.net/pt/tdd/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Strategy Pattern</title>
      <link>https://jroliveira.net/pt/strategy-pattern/</link>
      <guid>https://jroliveira.net/pt/strategy-pattern/</guid>
      <pubDate>Tue, 30 Oct 2012 00:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;Olá pessoal, vou falar um pouco sobre &lt;strong&gt;Strategy Pattern&lt;/strong&gt;, é um &lt;strong&gt;Design Pattern&lt;/strong&gt; que ficou famoso depois de ser catalogado pelo &lt;strong&gt;GoF (Gang Of Four)&lt;/strong&gt; formado por Erich Gamma, Richard Helm, Ralph Johnson e John Vlissides no livro &lt;em&gt;“Design Patterns: Elements of Reusable Object-Oriented Software”&lt;/em&gt;.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Olá pessoal, vou falar um pouco sobre <strong>Strategy Pattern</strong>, é um <strong>Design Pattern</strong> que ficou famoso depois de ser catalogado pelo <strong>GoF (Gang Of Four)</strong> formado por Erich Gamma, Richard Helm, Ralph Johnson e John Vlissides no livro <em>“Design Patterns: Elements of Reusable Object-Oriented Software”</em>.</p><span id="more"></span><p>Segue abaixo a definição de acordo com o livro:</p><blockquote><p>“Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.”</p></blockquote><p>Vamos ao exemplo para ficar mais claro a definição.</p><p>Imagina que você precisa desenvolver uma funcionalidade que irá validar um usuário. Este é um cenário bem simples e típico podemos fazer esta implementação de várias formas diferentes, abaixo segue um código que em um primeiro momento acho que seria o mais comum.</p><p>A primeira classe é uma controller do <strong>asp.net mvc</strong> que terá uma action que irá receber o usuário e a senha por <strong>POST</strong> e chamar a classe que irá validar estas informações.</p><figure class="highlight csharp"><figcaption><span>LoginController.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LoginController</span> : <span class="title">Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpPost</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params">LoginViewModel viewModel</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ModelState.IsValid) <span class="keyword">return</span> View(viewModel);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> username = viewModel.Username;</span><br><span class="line">        <span class="keyword">var</span> password = viewModel.Password;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> application = <span class="keyword">new</span> UserApplication();</span><br><span class="line">        <span class="keyword">var</span> valid = application.Validate(username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Caso o usuario nao seja valido, retorna para a view.</span></span><br><span class="line">        <span class="keyword">if</span> (!valid) <span class="keyword">return</span> View(viewModel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Autentica o usuario no sistema.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A classe abaixo será responsável por controlar o fluxo de validação do usuário.</p><figure class="highlight csharp"><figcaption><span>UserApplication.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Validate</span>(<span class="params"><span class="built_in">string</span> username, <span class="built_in">string</span> password</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> userDAO = <span class="keyword">new</span> UserDAO();</span><br><span class="line">        <span class="keyword">var</span> user = userDAO.GetBy(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user.Check(password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Nossa classe que será responsável por manipular os dados do usuário.</p><figure class="highlight csharp"><figcaption><span>UserDAO.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserDAO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">GetBy</span>(<span class="params"><span class="built_in">string</span> username</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> System.NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Como mencionado acima, este é um código bem simples, porém, este código é impossível testar unitariamente e caso haja a necessidade de alterar a fonte dos dados também será difícil.</p><p>Para resolver este problema, podemos aplicar o <strong>Strategy Pattern</strong>, de forma que iremos passar para a classe <strong>UserApplication</strong> a “estratégia” (classe) de acesso a dados que iremos utilizar, assim fica fácil testar a classe <strong>UserApplication</strong> unitariamente e de mudar a fonte de dados quando necessário.</p><figure class="highlight csharp"><figcaption><span>UserApplication.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> IUserDAO _userDAO;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserApplication</span>(<span class="params">IUserDAO userDAO</span>)</span> &#123;</span><br><span class="line">        _userDAO = userDAO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="built_in">bool</span> <span class="title">Validate</span>(<span class="params"><span class="built_in">string</span> username, <span class="built_in">string</span> password</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> user = _userDAO.GetBy(username);</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> user.Check(password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Notem que agora eu passo a dependência do repositório no construtor da minha classe <strong>UserApplication</strong>, sendo assim eu consigo passar qualquer classe que implemente a classe <strong>IUserDAO</strong>.</p><p>Abaixo notem que a nossa classe <strong>UserDAO</strong> sofreu uma modificação, agora ela implementa a interface <strong>IUserDAO</strong> sendo assim eu posso passar ela no construtor da nossa classe <strong>UserApplication</strong>.</p><figure class="highlight csharp"><figcaption><span>UserDAO.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IUserDAO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">GetBy</span>(<span class="params"><span class="built_in">string</span> username</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserDAO</span> : <span class="title">IUserDAO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">GetBy</span>(<span class="params"><span class="built_in">string</span> username</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> System.NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vocês podem perceber que agora estou passando para a classe <strong>UserApplication</strong> a conexão que ela deverá utilizar. Esta classe de conexão é uma “estratégia” que estou utilizando para acessar as informações do usuário, caso haja necessidade de acessar as informações de outra fonte de dados é necessário apenas implementar outra “estratégia” (classe) que implemente a interface <strong>IUserDAO</strong> e passar para a nossa classe <strong>UserApplication</strong> como mencionado acima.</p><figure class="highlight csharp"><figcaption><span>LoginController.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">LoginController</span> : <span class="title">Controller</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> View();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">HttpPost</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params">LoginViewModel viewModel</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ModelState.IsValid) <span class="keyword">return</span> View(viewModel);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> username = viewModel.Username;</span><br><span class="line">        <span class="keyword">var</span> password = viewModel.Password;</span><br><span class="line"></span><br><span class="line">        IUserDAO dao = <span class="keyword">new</span> UserDAO();</span><br><span class="line">        <span class="keyword">var</span> application = <span class="keyword">new</span> UserApplication(dao);</span><br><span class="line">        <span class="keyword">var</span> valid = application.Validate(username, password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Caso o usuario nao seja valido, retorna para a view.</span></span><br><span class="line">        <span class="keyword">if</span> (!valid) <span class="keyword">return</span> View(viewModel);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Autentica o usuario no sistema.</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Abaixo outra “estratégia” (classe) de acesso a dados que irá conter os métodos que simulará as operações na base de dados, nos ajudando assim a testar a classe <strong>UserApplication</strong>.</p><figure class="highlight csharp"><figcaption><span>FakeUserDAO.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FakeUserDAO</span> : <span class="title">IUserDAO</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> User User &#123; <span class="keyword">get</span>; <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">GetBy</span>(<span class="params"><span class="built_in">string</span> username</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> User;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O teste abaixo é para garantir que as operações da classe <strong>UserApplication</strong> estão de acordo com as regras do negócio.</p><figure class="highlight csharp"><figcaption><span>UserApplicationTest.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">[<span class="meta">TestFixture</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UserApplicationTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> Username = <span class="string">&quot;username&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">const</span> <span class="built_in">string</span> Password = <span class="string">&quot;password&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FakeUserDAO _fakeUserDAO;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">SetUp</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">SetUp</span>()</span> &#123;</span><br><span class="line">        _fakeUserDAO = <span class="keyword">new</span> FakeUserDAO();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Test</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Validate_QuandoUsuarioNaoExiste_RetornaFalse</span>()</span> &#123;</span><br><span class="line">        <span class="keyword">var</span> userApplication = <span class="keyword">new</span> UserApplication(_fakeUserDAO);</span><br><span class="line">        <span class="keyword">var</span> userIsValid = userApplication.Validate(Username, Password);</span><br><span class="line"></span><br><span class="line">        userIsValid.Should().Be.False();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Test</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Validate_QuandoASenhaEhInvalida_RetornaFalse</span>()</span> &#123;</span><br><span class="line">        _fakeUserDAO.User = <span class="keyword">new</span> User &#123; Password = <span class="string">&quot;pass&quot;</span> &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> userApplication = <span class="keyword">new</span> UserApplication(_fakeUserDAO);</span><br><span class="line">        <span class="keyword">var</span> userIsValid = userApplication.Validate(Username, Password);</span><br><span class="line"></span><br><span class="line">        userIsValid.Should().Be.False();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    [<span class="meta">Test</span>]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Validate_QuandoASenhaEhValida_RetornaTrue</span>()</span> &#123;</span><br><span class="line">        _fakeUserDAO.User = <span class="keyword">new</span> User &#123; Password = Password &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> userApplication = <span class="keyword">new</span> UserApplication(_fakeUserDAO);</span><br><span class="line">        <span class="keyword">var</span> userIsValid = userApplication.Validate(Username, Password);</span><br><span class="line"></span><br><span class="line">        userIsValid.Should().Be.True();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Analisando a definição do pattern, descrita no inicio do post:</p><p>O contexto é a classe <strong>UserApplication</strong>.</p><p>As estratégias criadas foram as classes que implementam a interface <strong>IUserDAO</strong> no caso a classe <strong>UserDAO</strong> e <strong>FakeUserDAO</strong>.</p><p>E os clientes que utilizam a classe <strong>UserApplication</strong> são os testes da classe <strong>UserApplication</strong> e a action da <strong>LoginController</strong>.</p><p>Neste post usei os seguintes pacotes: <a href="http://sharptestex.codeplex.com" target="_blank" rel="external noopener">Sharp Tests Ex</a> e <a href="http://www.nunit.org" target="_blank" rel="external noopener">NUnit</a>.</p><p>Existem outras aplicações mais comuns para o <strong>Strategy Pattern</strong> como: criptografias, logs entre outros cenários, escolhi este cenário também para demonstrar a aplicação de testes unitários em códigos “legados”.</p><p>Espero que tenham gostado do exemplo e até a próxima.</p>]]></content:encoded>
      
      
      <category domain="https://jroliveira.net/categories/dev/">dev</category>
      
      
      <category domain="https://jroliveira.net/tags/csharp/">csharp</category>
      
      <category domain="https://jroliveira.net/tags/design-pattern/">design pattern</category>
      
      <category domain="https://jroliveira.net/tags/di/">di</category>
      
      <category domain="https://jroliveira.net/tags/ioc/">ioc</category>
      
      
      <comments>https://jroliveira.net/pt/strategy-pattern/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>TDD: Jokenpo</title>
      <link>https://jroliveira.net/pt/tdd-jokenpo/</link>
      <guid>https://jroliveira.net/pt/tdd-jokenpo/</guid>
      <pubDate>Fri, 05 Oct 2012 00:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;Olá pessoal, motivado por um &lt;strong&gt;dojo&lt;/strong&gt; que teve no serviço onde o problema que escolhemos para resolver foi o jogo &lt;strong&gt;Jokenpo&lt;/strong&gt;, resolvi escrever a minha solução usando &lt;strong&gt;TDD&lt;/strong&gt;.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Olá pessoal, motivado por um <strong>dojo</strong> que teve no serviço onde o problema que escolhemos para resolver foi o jogo <strong>Jokenpo</strong>, resolvi escrever a minha solução usando <strong>TDD</strong>.</p><span id="more"></span><p>O problema foi tirado do site <a href="http://dojopuzzles.com/problemas/exibe/jokenpo/" target="_blank" rel="external noopener">DojoPuzzles.com - Jokenpo</a> que por sinal é muito bom tem vários problemas para resolver.</p><p>A solução está publicada no meu <strong>GitHub</strong>. Segue o link:</p><p><a href="https://github.com/junioro/Jokenpo_CSharp" target="_blank" rel="external noopener">Jokenpo - C#</a></p><p>Até a próxima pessoal.</p>]]></content:encoded>
      
      
      <category domain="https://jroliveira.net/categories/dev/">dev</category>
      
      
      <category domain="https://jroliveira.net/tags/csharp/">csharp</category>
      
      <category domain="https://jroliveira.net/tags/tdd/">tdd</category>
      
      
      <comments>https://jroliveira.net/pt/tdd-jokenpo/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Princípio de Segregação de Interface</title>
      <link>https://jroliveira.net/pt/princpio-de-segregao-de-interface/</link>
      <guid>https://jroliveira.net/pt/princpio-de-segregao-de-interface/</guid>
      <pubDate>Sun, 02 Sep 2012 00:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;Olá pessoal, vou fazer alguns posts sobre &lt;strong&gt;S.O.L.I.D.&lt;/strong&gt; O primeiro que gostaria de abordar com vocês é:&lt;/p&gt;
&lt;pre&gt;
  &lt;span class=&quot;text-muted&quot;&gt;S&lt;/span&gt;
  &lt;span class=&quot;text-muted&quot;&gt;O&lt;/span&gt;
  &lt;span class=&quot;text-muted&quot;&gt;L&lt;/span&gt;
  &lt;strong&gt;I&lt;/strong&gt;&lt;span class=&quot;text-default&quot;&gt;SP - Interface Segregation Principle&lt;/span&gt;
  &lt;span class=&quot;text-muted&quot;&gt;D&lt;/span&gt;
&lt;/pre&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Olá pessoal, vou fazer alguns posts sobre <strong>S.O.L.I.D.</strong> O primeiro que gostaria de abordar com vocês é:</p><pre>  <span class="text-muted">S</span>  <span class="text-muted">O</span>  <span class="text-muted">L</span>  <strong>I</strong><span class="text-default">SP - Interface Segregation Principle</span>  <span class="text-muted">D</span></pre><span id="more"></span><p>A definição basicamente é:</p><blockquote><p>“Clients should not be forced to depend upon interfaces that they do not use.”</p></blockquote><p>Para mais detalhes sobre a definição, segue o link do artigo <a href="http://www.objectmentor.com/resources/articles/isp.pdf" title="The Interface Segregation Principle" target="_blank" rel="external noopener">The Interface Segregation Principle</a> que é um resumo de um capitulo do livro <em>“Agile Principles, Patterns, and Practices in C#”</em> de Martin C. Robert e Martin Micah.</p><p>Gostaria de mostrar um exemplo real onde o principio é quebrado. O exemplo está em <strong>C#</strong>.</p><p>O meu problema era que eu tinha uma interface onde todas as classes que precisavam fazer alguma persistência tinham que implementar, nesta interface eu tinha definido três métodos: <strong>Save</strong>, <strong>Delete</strong> e <strong>GetBy</strong>, porém, nem todas as classes precisavam implementar todos estes métodos.</p><figure class="highlight csharp"><figcaption><span>IRepository.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IRepository</span>&lt;<span class="title">TEnt</span>&gt;</span><br><span class="line">    <span class="keyword">where</span> <span class="title">TEnt</span> : <span class="title">Entity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">TEnt <span class="title">Get</span>(<span class="params"><span class="built_in">int</span> id</span>)</span>;</span><br><span class="line">    <span class="function">TEnt <span class="title">Save</span>(<span class="params">TEnt entity</span>)</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Delete</span>(<span class="params">TEnt entity</span>)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>O próximo código mostra uma interface para definir as operações que uma ordem poderá realizar na base de dados, já que a mesma estende da interface <strong>IRepository</strong>.</p><figure class="highlight csharp"><figcaption><span>IOrderRepository.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IOrderRepository</span> : <span class="title">IRepository</span>&lt;<span class="title">Order</span>&gt; &#123; &#125;</span><br></pre></td></tr></table></figure><p>O código abaixo é a classe que irá implementar os métodos definidos na interface <strong>IOrderRepository</strong> que por sua vez irá implementar os métodos definidos na interface <strong>IRepository</strong> já que a interface <strong>IOrderRepository</strong> estende da interface <strong>IRepository</strong>.</p><figure class="highlight csharp"><figcaption><span>OrderRepository.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderRepository</span> : <span class="title">IOrderRepository</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">Get</span>(<span class="params"><span class="built_in">int</span> id</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//Implementacao da busca da ordem no banco.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">Save</span>(<span class="params">Order entity</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//Implementacao da insercao/atualizacao da ordem no banco.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Delete</span>(<span class="params">Order entity</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//Este metodo eu nao vou utilizar porem ele esta aqui porque</span></span><br><span class="line">        <span class="comment">//a interface IRepository obriga que eu o implemente.</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotImplementedException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Percebem que o método <strong>Delete</strong> tem um <strong>throw new NotImplementedException()</strong>, porque eu não vou usar este método para nada, ele só está ai porque está definido na minha interface <strong>IRepository</strong>, e por este motivo eu sou obrigado a implementá-lo, o problema é que quando eu for utilizar a classe <strong>OrderRepository</strong> não tem como eu saber se o método delete tem implementação ou não e quando eu chamar o mesmo irá gerar uma exceção. Este é um exemplo que quebra o principio ISP.</p><p>Abaixo uma forma de resolver este problema. Notem que eu quebrei a interface <strong>IRepository</strong> em outras três interfaces:</p><ul><li><strong>IDeleteRepository</strong>: Que irá conter a definição do método <strong>Delete</strong>.</li><li><strong>IGetRepository</strong>: Que irá conter a definição do método <strong>GetBy</strong>.</li><li><strong>ISaveRepository</strong>: Que irá conter a definição do método <strong>Save</strong>.</li></ul><p>A interface <strong>IRepository</strong> agora estende das três interfaces definidas acima, caso tenha alguma interface que precise definir as três operações, pode estender da interface <strong>IRepository</strong>.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IDeleteRepository</span>&lt;<span class="keyword">in</span> <span class="title">TEnt</span>&gt;</span><br><span class="line">    <span class="keyword">where</span> <span class="title">TEnt</span> : <span class="title">Entity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Delete</span>(<span class="params">TEnt entity</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IGetRepository</span>&lt;<span class="keyword">out</span> <span class="title">TEnt</span>&gt;</span><br><span class="line">    <span class="keyword">where</span> <span class="title">TEnt</span> : <span class="title">Entity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">TEnt <span class="title">Get</span>(<span class="params"><span class="built_in">int</span> id</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ISaveRepository</span>&lt;<span class="title">TEnt</span>&gt;</span><br><span class="line">    <span class="keyword">where</span> <span class="title">TEnt</span> : <span class="title">Entity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">TEnt <span class="title">Save</span>(<span class="params">TEnt entity</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IRepository</span>&lt;<span class="title">TEnt</span>&gt;</span><br><span class="line">    : <span class="title">ISaveRepository</span>&lt;<span class="title">TEnt</span>&gt;,</span><br><span class="line">        <span class="title">IDeleteRepository</span>&lt;<span class="title">TEnt</span>&gt;,</span><br><span class="line">        <span class="title">IGetRepository</span>&lt;<span class="title">TEnt</span>&gt;</span><br><span class="line">    <span class="keyword">where</span> <span class="title">TEnt</span> : <span class="title">Entity</span></span><br><span class="line">&#123; &#125;</span><br></pre></td></tr></table></figure><p>Notem agora que a interface <strong>IOrderRepository</strong> não estende mais a interface <strong>IRepository</strong> e sim as interfaces: <strong>IGetRepository</strong> e <strong>ISaveRepository</strong>.</p><figure class="highlight csharp"><figcaption><span>IOrderRepository.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IOrderRepository</span></span><br><span class="line">    : <span class="title">IGetRepository</span>&lt;<span class="title">Order</span>&gt;, <span class="title">ISaveRepository</span>&lt;<span class="title">Order</span>&gt;</span><br><span class="line">&#123; &#125;</span><br></pre></td></tr></table></figure><p>Agora a nossa classe OrderRepository não contém mais o método <strong>Delete</strong>.</p><figure class="highlight csharp"><figcaption><span>OrderRepository.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">OrderRepository</span> : <span class="title">IOrderRepository</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">Get</span>(<span class="params"><span class="built_in">int</span> id</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//Implementacao da busca da ordem no banco.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Order <span class="title">Save</span>(<span class="params">Order entity</span>)</span> &#123;</span><br><span class="line">        <span class="comment">//Implementacao da insercao/atualizacao da ordem no banco.</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Vocês podem notar que para resolver o problema do <strong>throw new NotImplementedException()</strong> eu tive que criar interfaces mais especificas, e a nossa classe final contém agora apenas os métodos que realmente precisa.</p><p>O código abaixo não é importante para o nosso exemplo, será mostrando apenas para completar os códigos acima.</p><p>Está é a classe base das minhas entidades. Como podem notar a interface <strong>IRepository</strong> pede a definição de um tipo que herde está classe.<br>Note que ela contém uma propriedade chamada <strong>Id</strong> do tipo <strong>int</strong>, caso você tenha a necessidade de ter em cada entidade uma propriedade Id de um tipo diferente você precisa apenas deixar genérico o tipo desta propriedade, como é apenas um exemplo não adicionei está complexidade a minha classe.</p><figure class="highlight csharp"><figcaption><span>Entity.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Entity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">int</span> Id &#123; <span class="keyword">get</span>; <span class="keyword">protected</span> <span class="keyword">set</span>; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>A classe abaixo é a minha classe de <strong>Order</strong>, note que ela herda da classe <strong>Entity</strong> que foi explicada acima.</p><figure class="highlight csharp"><figcaption><span>Order.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Order</span> : <span class="title">Entity</span> &#123; &#125;</span><br></pre></td></tr></table></figure><p>Obrigado pela visita e espero que tenha gostado, qualquer dúvida é só entrar em contato.</p>]]></content:encoded>
      
      
      <category domain="https://jroliveira.net/categories/dev/">dev</category>
      
      
      <category domain="https://jroliveira.net/tags/csharp/">csharp</category>
      
      <category domain="https://jroliveira.net/tags/solid/">solid</category>
      
      
      <comments>https://jroliveira.net/pt/princpio-de-segregao-de-interface/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Registrar Logs no Event Viewer com Delphi</title>
      <link>https://jroliveira.net/pt/registrar-logs-no-event-viewer-com-delphi/</link>
      <guid>https://jroliveira.net/pt/registrar-logs-no-event-viewer-com-delphi/</guid>
      <pubDate>Thu, 19 May 2011 00:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;Pessoal, estudando formas de gravar logs da aplicação, me lembrei do &lt;strong&gt;Event Viewer&lt;/strong&gt; do &lt;strong&gt;Windows&lt;/strong&gt;, tempo atrás utilizava classes do &lt;strong&gt;.Net&lt;/strong&gt; em &lt;strong&gt;C#&lt;/strong&gt; para fazer este logs e não mais em arquivos textos. Resolvi estudar se era possível utilizar a mesma técnica em &lt;strong&gt;Delphi XE&lt;/strong&gt; e descobri que sim achei interessante compartilhar com vocês. Vale lembrar que não é algo novo, funciona em versões anteriores do &lt;strong&gt;Delphi&lt;/strong&gt;.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Pessoal, estudando formas de gravar logs da aplicação, me lembrei do <strong>Event Viewer</strong> do <strong>Windows</strong>, tempo atrás utilizava classes do <strong>.Net</strong> em <strong>C#</strong> para fazer este logs e não mais em arquivos textos. Resolvi estudar se era possível utilizar a mesma técnica em <strong>Delphi XE</strong> e descobri que sim achei interessante compartilhar com vocês. Vale lembrar que não é algo novo, funciona em versões anteriores do <strong>Delphi</strong>.</p><span id="more"></span><p>E para não ficar apenas em um exemplo de como utilizar o <strong>Event Viewer</strong> com <strong>Delphi</strong>, desenvolvi toda uma estrutura de logs de mensagens utilizando <strong>Interfaces</strong>, onde ficará fácil caso queiram mudar a forma de gravação dos logs das aplicações de vocês, e também, estou utilizando neste exemplo uma arquitetura onde será fácil aplicar <strong>IoC</strong> (<strong>Inversão de Controle</strong>) e <strong>DI</strong> (<strong>Injeção de Dependências</strong>), vou deixar para falar deste dois Padrões em outro post.</p><p>O primeiro código é o nosso <strong>enumerator</strong>, que irá conter os tipos possíveis de log das mensagens da aplicação. Não é necessário separar este <strong>enumerator</strong> da <strong>unit</strong> que irá conter a nossa <strong>interface</strong> descrita abaixo, fiz está separação apenas para organizar melhor os arquivos da aplicação.</p><figure class="highlight delphi"><figcaption><span>TLogType.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unit</span> LogType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span></span><br><span class="line">  TLogType = (Information, Warning, Error);</span><br><span class="line"></span><br><span class="line"><span class="keyword">implementation</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure><p>O segundo código é a nossa <strong>Interface</strong> (Contrato), onde todas as classes que irão realizar logs deverão. Note que estou utilizando <strong>summary</strong>, ele é usado para descrever informações sobre o <strong>tipo</strong> ou <strong>membros do tipo</strong>, para quando formos utilizar já venha à definição do <strong>tipo</strong> no <strong>Intellisense</strong> como <strong>tipos</strong> próprio <strong>Delphi</strong> e também é uma forma de documentação do código fonte.</p><figure class="highlight delphi"><figcaption><span>ILogger.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unit</span> Logger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uses</span></span><br><span class="line">  LogType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span></span><br><span class="line">  ILogger = <span class="keyword">interface</span></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// Registra os logs.</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name=&quot;message&quot;&gt;Mensagem que sera registrada.&lt;/param&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name=&quot;logType&quot;&gt;Tipo do log.&lt;/param&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">procedure</span> <span class="title">Write</span><span class="params">(<span class="keyword">message</span>: <span class="keyword">string</span>; logType: TLogType)</span>;</span></span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">implementation</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure><p>Abaixo a implementação da nossa classe que será responsável por registrar os logs no <strong>Event Viewer</strong> do <strong>Windows</strong>. Não há muito que comentar do código apenas que estou utilizando um arquivo ***.ini**, localizado no path da aplicação para guardar as configurações do sistema e que não estou usando <strong>Strategy Pattern</strong>, vou deixar o código da forma que está para refatorar ele e explicar melhor este Pattern em outro artigo.</p><figure class="highlight delphi"><figcaption><span>TLoggerEventViewer.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unit</span> LoggerEventViewer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uses</span></span><br><span class="line">  Forms, IniFiles, SysUtils, SvcMgr, Windows, Logger, LogType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span></span><br><span class="line">  <span class="title">TLoggerEventViewer</span> = <span class="keyword">class</span>(TInterfacedObject, ILogger)</span><br><span class="line">  <span class="keyword">public</span></span><br><span class="line">    <span class="comment">&#123; Public declarations &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">procedure</span> <span class="title">Write</span><span class="params">(<span class="keyword">message</span>: <span class="keyword">string</span>; logType: TLogType)</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">implementation</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#123; TEventView &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TLoggerEventViewer</span>.<span class="title">Write</span><span class="params">(<span class="keyword">message</span>: <span class="keyword">string</span>; logType: TLogType)</span>;</span></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">  iniFiles: TIniFile;</span><br><span class="line">  eventLogger: TEventLogger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  iniFiles := TIniFile.Create(Format(<span class="string">&#x27;%s%s&#x27;</span>, [ExtractFilePath(Forms.Application.ExeName), <span class="string">&#x27;Config.ini&#x27;</span>]));</span><br><span class="line">  eventLogger := TEventLogger.Create(iniFiles.ReadString(<span class="string">&#x27;Application&#x27;</span>, <span class="string">&#x27;LoggerEventSource&#x27;</span>, <span class="string">&#x27;&#x27;</span>));</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">    <span class="keyword">case</span> logType <span class="keyword">of</span></span><br><span class="line">      TLogType.Error:</span><br><span class="line">        eventLogger.LogMessage(<span class="keyword">message</span>, EVENTLOG_ERROR_TYPE, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      TLogType.Warning:</span><br><span class="line">        eventLogger.LogMessage(<span class="keyword">message</span>, EVENTLOG_WARNING_TYPE, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">      TLogType.Information:</span><br><span class="line">        eventLogger.LogMessage(<span class="keyword">message</span>, EVENTLOG_INFORMATION_TYPE, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">finally</span></span><br><span class="line">    iniFiles.Free();</span><br><span class="line">    FreeAndNil(eventLogger);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure><p>Abaixo a implementação da nossa classe que será responsável por registrar os logs em <strong>arquivo texto</strong>. A única consideração é que estou utilizando o método <strong>WriteAllText</strong> da classe <strong>TFile</strong> contida na nova unit <strong>IOUtils</strong> para <strong>IO</strong> (input&#x2F;output) do <strong>Delphi</strong>, este método sempre sobrescreve o conteúdo do arquivo (não é recomendado o uso para realizar logs já que não grava a informação que já existia no arquivo, estou utilizando apenas como exemplo), também verifica se existe criado no disco caso não existe ele já cria automaticamente.</p><figure class="highlight delphi"><figcaption><span>TLoggerFileText.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unit</span> LoggerFileText;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uses</span></span><br><span class="line">  Forms, IniFiles, IOUtils, TypInfo, SysUtils, Logger, LogType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span></span><br><span class="line">  <span class="title">TLoggerFileText</span> = <span class="keyword">class</span>(TInterfacedObject, ILogger)</span><br><span class="line">  <span class="keyword">public</span></span><br><span class="line">    <span class="comment">&#123; Public declarations &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">procedure</span> <span class="title">Write</span><span class="params">(<span class="keyword">message</span>: <span class="keyword">string</span>; logType: TLogType)</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">implementation</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#123; TEventView &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TLoggerFileText</span>.<span class="title">Write</span><span class="params">(<span class="keyword">message</span>: <span class="keyword">string</span>; logType: TLogType)</span>;</span></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">  iniFile: TIniFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">message</span> := Format(<span class="string">&#x27;%s - %s&#x27;</span>, [GetEnumName(TypeInfo(TLogType), Integer(logType)), <span class="keyword">message</span>]);</span><br><span class="line">  iniFile := TIniFile.Create(Format(<span class="string">&#x27;%s%s&#x27;</span>, [ExtractFilePath(Application.ExeName), <span class="string">&#x27;Config.ini&#x27;</span>]));</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">    TFile.WriteAllText(iniFile.ReadString(<span class="string">&#x27;Application&#x27;</span>, <span class="string">&#x27;LoggerFilePath&#x27;</span>, <span class="string">&#x27;&#x27;</span>), <span class="keyword">message</span>);</span><br><span class="line">  <span class="keyword">finally</span></span><br><span class="line">    iniFile.Free();</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure><p>Caso queiram gravar os logs também em <strong>banco de dados</strong> ou deixar já uma classe que permita está ação, é necessário apenas implementar a forma de acesso e gravação no <strong>banco de dados</strong> dentro do método <strong>Write</strong>, vocês irão notar mais abaixo que a forma de utilização da classe não irá mudar.</p><figure class="highlight delphi"><figcaption><span>TLoggerDatabase.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unit</span> LoggerDatabase;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uses</span></span><br><span class="line">  Logger, LogType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span></span><br><span class="line">  <span class="title">TLoggerDatabase</span> = <span class="keyword">class</span>(TInterfacedObject, ILogger)</span><br><span class="line">  <span class="keyword">public</span></span><br><span class="line">    <span class="comment">&#123; Public declarations &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">procedure</span> <span class="title">Write</span><span class="params">(<span class="keyword">message</span>: <span class="keyword">string</span>; logType: TLogType)</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">implementation</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#123; TEventView &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TLoggerDatabase</span>.<span class="title">Write</span><span class="params">(<span class="keyword">message</span>: <span class="keyword">string</span>; logType: TLogType)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="comment">&#123; Implementar a forma de acesso e gravacao na base de dados. &#125;</span></span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure><p>Abaixo o código da nossa classe que será responsável por gerenciar os logs da aplicação. Note que existem dois métodos <strong>Create</strong>, um está recebendo uma variável <strong>ILogger</strong> que é a nossa <strong>interface</strong> que contém os métodos responsáveis por fazer o log da aplicação, este é um exemplo de <strong>IoC</strong>. E o outro método <strong>Create</strong> irá chamar o método descrito acima passando a forma de autenticação que será utilizada na aplicação por padrão, este é um exemplo de <strong>DI</strong>. Da forma que foi desenvolvida está classe fica fácil usar um <strong>Container de Dependências</strong> que será assuntos de outro post.</p><figure class="highlight delphi"><figcaption><span>TLogManager.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unit</span> LogManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uses</span></span><br><span class="line">  Logger, LogType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span></span><br><span class="line">  TLogManager = <span class="keyword">class</span></span><br><span class="line">  <span class="keyword">private</span></span><br><span class="line">    <span class="comment">&#123; Private declarations&#125;</span></span><br><span class="line">    _logger: ILogger;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span></span><br><span class="line">    <span class="comment">&#123; Public declarations &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name=&quot;logger&quot;&gt;&lt;/param&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">constructor</span> <span class="title">Create</span><span class="params">(<span class="keyword">const</span> logger: ILogger)</span>;</span> <span class="keyword">overload</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">///</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">constructor</span> <span class="title">Create</span><span class="params">()</span>;</span> <span class="keyword">overload</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// Registra os logs do tipo informacao.</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name=&quot;message&quot;&gt;Informacao que sera registrada.&lt;/param&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">procedure</span> <span class="title">WriteInfo</span><span class="params">(<span class="keyword">message</span>: <span class="keyword">string</span>)</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// Registra os logs do tipo atencao.</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name=&quot;message&quot;&gt;Mensagem de atencao que sera registrada.&lt;/param&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">procedure</span> <span class="title">WriteWarning</span><span class="params">(<span class="keyword">message</span>: <span class="keyword">string</span>)</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// &lt;summary&gt;</span></span><br><span class="line">    <span class="comment">/// Registra os logs do tipo erro.</span></span><br><span class="line">    <span class="comment">/// &lt;/summary&gt;</span></span><br><span class="line">    <span class="comment">/// &lt;param name=&quot;message&quot;&gt;Erro que sera registrado.&lt;/param&gt;</span></span><br><span class="line">    <span class="function"><span class="keyword">procedure</span> <span class="title">WriteError</span><span class="params">(<span class="keyword">message</span>: <span class="keyword">string</span>)</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">implementation</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uses</span></span><br><span class="line">  LoggerEventViewer, LoggerFileText;</span><br><span class="line"></span><br><span class="line"><span class="comment">&#123; TLogManager &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constructor</span> <span class="title">TLogManager</span>.<span class="title">Create</span><span class="params">(<span class="keyword">const</span> logger: ILogger)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  _logger := logger;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constructor</span> <span class="title">TLogManager</span>.<span class="title">Create</span><span class="params">()</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  Create(TLoggerFileText.Create());</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TLogManager</span>.<span class="title">WriteInfo</span><span class="params">(<span class="keyword">message</span>: <span class="keyword">string</span>)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  _logger.<span class="keyword">Write</span>(<span class="keyword">message</span>, TLogType.Information);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TLogManager</span>.<span class="title">WriteWarning</span><span class="params">(<span class="keyword">message</span>: <span class="keyword">string</span>)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  _logger.<span class="keyword">Write</span>(<span class="keyword">message</span>, TLogType.Warning);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TLogManager</span>.<span class="title">WriteError</span><span class="params">(<span class="keyword">message</span>: <span class="keyword">string</span>)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  _logger.<span class="keyword">Write</span>(<span class="keyword">message</span>, TLogType.Error);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure><p>Para utilizar as nossas classes de log é necessário antes colocar no <strong>uses</strong> as <strong>units</strong> abaixo.</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uses</span></span><br><span class="line">  Logger, LogManager, LoggerEventViewer;</span><br></pre></td></tr></table></figure><p>Existem duas formas de utilizar a nossa classe <strong>LogManager</strong>. A primeira forma, é apenas instanciar o nosso objeto <strong>logManager</strong> do tipo <strong>TLogManager</strong> sem passar nenhum objeto no construtor, sendo assim a nossa classe será responsável por instanciar a variável do tipo <strong>ILogger</strong> com a classe padrão de realizar logs do sistema. Segue abaixo um exemplo.</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br><span class="line">  logManager: TLogManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  logManager := TLogManager.Create();</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">    logManager.WriteInfo(<span class="string">&#x27;Mensagem de info do projeto de estudo!&#x27;</span>);</span><br><span class="line">    logManager.WriteWarning(<span class="string">&#x27;Mensagem de warning do projeto de estudo!&#x27;</span>);</span><br><span class="line">    logManager.WriteError(<span class="string">&#x27;Mensagem de error do projeto de estudo!&#x27;</span>);</span><br><span class="line">  <span class="keyword">finally</span></span><br><span class="line">    FreeAndNil(logManager);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>A segunda forma é criar uma variável do tipo <strong>ILogger</strong> e depois instanciar este objeto com a classe na qual deseja realizar o log da aplicação, e passar como parametro no construtor do método Create da classe TLogManager. Note que a forma de utilização é a mesma para todos os casos, o que altera é apenas a classe que irá instanciar o nosso objeto, com isto, mudar a forma que se realiza o log e a manutenção do código se torna muito mais simples e fácil. Segue abaixo um exemplo.</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br><span class="line">  logger: ILogger;</span><br><span class="line">  logManager: TLogManager;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  logger := TLoggerEventViewer.Create();</span><br><span class="line">  logManager := TLogManager.Create(logger);</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">    logManager.WriteInfo(<span class="string">&#x27;Mensagem de info do projeto de estudo!&#x27;</span>);</span><br><span class="line">    logManager.WriteWarning(<span class="string">&#x27;Mensagem de warning do projeto de estudo!&#x27;</span>);</span><br><span class="line">    logManager.WriteError(<span class="string">&#x27;Mensagem de error do projeto de estudo!&#x27;</span>);</span><br><span class="line">  <span class="keyword">finally</span></span><br><span class="line">    FreeAndNil(logManager);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>Abaixo as configurações do nosso arquivo de configuração <strong>Config.ini</strong> localizado junto ao executável do projeto.</p><figure class="highlight delphi"><figcaption><span>Config.ini</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[Application]</span><br><span class="line"><span class="comment">//Caminho que sera gravado o arquivo de log.</span></span><br><span class="line">LoggerFilePath=<span class="string">&#x27;C:\EstudoDelphi.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Nome da fonte do Event Viewer.</span></span><br><span class="line">LoggerEventSource=<span class="string">&#x27;EstudoDelphi&#x27;</span></span><br></pre></td></tr></table></figure><p>Para abrir o Event Viewer do Windows, basta ir no <strong>Executar</strong> e digitar: <strong>eventvwr.msc</strong>.</p><p>Se quiserem o código fonte do exemplo, é só clicar <a href="http://www.activedelphi.com.br/imagens/artigos/reg_log_event_viewer/RegLogEventViewer.zip" target="_blank" rel="external noopener">aqui</a>. Espero que tenham gostado deste artigo. Agradeço a visita.</p>]]></content:encoded>
      
      
      <category domain="https://jroliveira.net/categories/dev/">dev</category>
      
      
      <category domain="https://jroliveira.net/tags/delphi/">delphi</category>
      
      <category domain="https://jroliveira.net/tags/di/">di</category>
      
      <category domain="https://jroliveira.net/tags/ioc/">ioc</category>
      
      
      <comments>https://jroliveira.net/pt/registrar-logs-no-event-viewer-com-delphi/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Consumindo DataSnap Server com C#</title>
      <link>https://jroliveira.net/pt/consumindo-datasnap-server-com-c-sharp/</link>
      <guid>https://jroliveira.net/pt/consumindo-datasnap-server-com-c-sharp/</guid>
      <pubDate>Fri, 01 Apr 2011 00:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;Olá pessoal, mais um post sobre &lt;strong&gt;DataSnap&lt;/strong&gt; com &lt;strong&gt;Delphi XE&lt;/strong&gt;, agora eu vou demonstrar como consumir um método em um servidor DataSnap a partir de um cliente em &lt;strong&gt;C#&lt;/strong&gt;.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Olá pessoal, mais um post sobre <strong>DataSnap</strong> com <strong>Delphi XE</strong>, agora eu vou demonstrar como consumir um método em um servidor DataSnap a partir de um cliente em <strong>C#</strong>.</p><span id="more"></span><p>Segue o código do nosso método responsável por fazer a requisição no servidor.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="built_in">string</span> <span class="title">HttpGet</span>(<span class="params"><span class="built_in">string</span> url</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">string</span> result;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Faz a requisicao a url montada acima.</span></span><br><span class="line">        <span class="keyword">using</span> (<span class="keyword">var</span> resp = WebRequest.Create(url).GetResponse())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">var</span> reader = <span class="keyword">new</span> StreamReader(resp.GetResponseStream());</span><br><span class="line">            result = reader.ReadToEnd();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> Exception(<span class="string">&quot;Ocorreu um erro!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Método responsável por fazer a validação dos dados antes de realizar a solicitação no servidor.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="built_in">bool</span> <span class="title">Validacao</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (TxtCPF.Text.Trim() == <span class="built_in">string</span>.Empty)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(<span class="string">&quot;Digite um CPF!&quot;</span>);</span><br><span class="line">        TxtCPF.Focus();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Método principal da aplicação. Note que estou utilizando uma classe chamada <strong>JObject</strong> para fazer a conversão dos dados de retorno do servidor para um objeto em JSON, está classe está contida na Class Library <strong>Newtonsoft.Json.dll</strong> para trabalhar com dados em JSON. Segue o link do projeto para download <a href="http://james.newtonking.com/projects/json-net.aspx" target="_blank" rel="external noopener">Json.NET</a>. Estou utilizando está classe pois achei bem simples a forma de utilização.</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">BtnValidar_Click</span>(<span class="params"><span class="built_in">object</span> sender, EventArgs e</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//Verifica se o campo CPF foi digitado.</span></span><br><span class="line">    <span class="keyword">if</span> (!Validacao()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Caminho do servidor de aplicacao.</span></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">string</span> servidor = <span class="string">@&quot;http://localhost:8081/datasnap/rest/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Metodo que sera consumido.</span></span><br><span class="line">    <span class="keyword">const</span> <span class="built_in">string</span> metodo = <span class="string">@&quot;TServerFunctions/validateCPF/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Parametros do metodo.</span></span><br><span class="line">    <span class="keyword">var</span> parametro = TxtCPF.Text.Trim();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//URL que sera processada.</span></span><br><span class="line">    <span class="keyword">var</span> url = <span class="built_in">string</span>.Format(<span class="string">&quot;&#123;0&#125;&#123;1&#125;&#123;2&#125;&quot;</span>, servidor, metodo, parametro);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> pagina;</span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//Faz a requisicao a url montada acima.</span></span><br><span class="line">        pagina = HttpGet(url);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (Exception ex)</span><br><span class="line">    &#123;</span><br><span class="line">        MessageBox.Show(ex.Message);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Verifica se o metodo retornou algum valor.</span></span><br><span class="line">    <span class="keyword">if</span> (pagina == <span class="literal">null</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Le os dados de retorno do servidor passando para JSON.</span></span><br><span class="line">    <span class="keyword">var</span> obj = JObject.Parse(pagina);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Verifica o retorno do metodo. </span></span><br><span class="line">    <span class="comment">//E mostra para o usuario.</span></span><br><span class="line">    <span class="keyword">var</span> array = (JArray)obj[<span class="string">&quot;result&quot;</span>];</span><br><span class="line">    <span class="keyword">if</span> ((<span class="built_in">bool</span>)array[<span class="number">0</span>])</span><br><span class="line">        MessageBox.Show(<span class="string">@&quot;CPF valido!&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        MessageBox.Show(<span class="string">@&quot;CPF invalido!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Este foi mais um post de integração usando <strong>DataSnap</strong> espero que tenham gostado.</p>]]></content:encoded>
      
      
      <category domain="https://jroliveira.net/categories/dev/">dev</category>
      
      
      <category domain="https://jroliveira.net/tags/delphi/">delphi</category>
      
      <category domain="https://jroliveira.net/tags/json/">json</category>
      
      <category domain="https://jroliveira.net/tags/csharp/">csharp</category>
      
      <category domain="https://jroliveira.net/tags/datasnap/">datasnap</category>
      
      
      <comments>https://jroliveira.net/pt/consumindo-datasnap-server-com-c-sharp/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Garbage Collector no Delphi - Parte II</title>
      <link>https://jroliveira.net/pt/garbage-collector-no-delphi-parte-ii/</link>
      <guid>https://jroliveira.net/pt/garbage-collector-no-delphi-parte-ii/</guid>
      <pubDate>Sat, 12 Mar 2011 00:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;Olá pessoal, continuando o post anterior de &lt;strong&gt;Garbage Collector&lt;/strong&gt;, agora vou explorar o uso para objetos que herdam a classe &lt;strong&gt;TObject&lt;/strong&gt;.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Olá pessoal, continuando o post anterior de <strong>Garbage Collector</strong>, agora vou explorar o uso para objetos que herdam a classe <strong>TObject</strong>.</p><span id="more"></span><p>Em uma thread na lista de discução <strong><a href="http://br.groups.yahoo.com/group/lista-delphi/" target="_blank" rel="external noopener">lista-delphi</a></strong> o membro <strong>Caique</strong> vez uma colocação perfeita do <strong>Garbage Collector</strong> no <strong>Delphi</strong> e como tinha prometido na thread vou compartilhar com vocês a explicação dele. Segue o link da <strong><a href="http://br.groups.yahoo.com/group/lista-delphi/message/143527" target="_blank" rel="external noopener">thread</a></strong>.</p><blockquote><p>O <strong>Delphi</strong> “não” tem <strong>Garbage Collector</strong>. Entende-se por <strong>Garbage Collector</strong> uma forma de destruir qualquer objeto fora de contexto como ocorre em plataformas gerenciadas. O que esta demonstrando no seu exemplo é o uso de interfaces e estas sim por definição destroem o objeto a qual estão associadas quando saem do contexto.</p></blockquote><p>Primeiro desenvolvi uma classe que será responsável por coletar os objetos que não estão mais sendo utilizados.</p><figure class="highlight delphi"><figcaption><span>TSafeGuard.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unit</span> GarbageCollector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uses</span></span><br><span class="line">  SysUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span></span><br><span class="line">  ISafeGuard = <span class="keyword">type</span> IUnknown;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span></span><br><span class="line">  <span class="title">TSafeGuard</span> = <span class="keyword">class</span>(TInterfacedObject, ISafeGuard)</span><br><span class="line">  <span class="keyword">private</span></span><br><span class="line">    <span class="comment">&#123; Private declarations &#125;</span></span><br><span class="line">    FObj: TObject;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span></span><br><span class="line">    <span class="comment">&#123; Public declarations &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">constructor</span> <span class="title">Create</span><span class="params">(obj: TObject)</span>;</span></span><br><span class="line">    <span class="function"><span class="keyword">destructor</span> <span class="title">Destroy</span><span class="params">()</span>;</span> <span class="keyword">override</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Guard</span><span class="params">(<span class="keyword">out</span> SafeGuard : ISafeGuard)</span> :</span> TObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">implementation</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#123; TSafeGuard &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constructor</span> <span class="title">TSafeGuard</span>.<span class="title">Create</span><span class="params">(obj: TObject)</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  self.FObj := obj;</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">destructor</span> <span class="title">TSafeGuard</span>.<span class="title">Destroy</span><span class="params">()</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">if</span> (Assigned(self.FObj)) <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">      FreeAndNil(self.FObj);</span><br><span class="line">    <span class="keyword">except</span></span><br><span class="line">      <span class="keyword">on</span> e : EInvalidPointer <span class="keyword">do</span></span><br><span class="line">        <span class="comment">&#123; Objeto ja liberado da memoria. &#125;</span></span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">inherited</span> Destroy();</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Guard</span><span class="params">(<span class="keyword">out</span> SafeGuard: ISafeGuard)</span>:</span> TObject;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  Result := TObject.Create();</span><br><span class="line">  SafeGuard := TSafeGuard.Create(Result);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure><p>Depois criei um <strong>Class Helper</strong> para a classe <strong>TObject</strong> do <strong>Delphi</strong> com isto garantimos que todos os objetos que herdam a classe <strong>TObject</strong> serão coletados pelo nosso <strong>Garbage Collector</strong>. Note que estou utilizando <strong>Generics</strong> para a nossa função <strong>New()</strong> já realizar o cast no objeto sem agente precisar se preocupar com isto.</p><figure class="highlight delphi"><figcaption><span>THelperObject.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unit</span> HelperObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uses</span></span><br><span class="line">  SysUtils, Generics.Collections, GarbageCollector;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span></span><br><span class="line">  THelperObject = <span class="keyword">class</span> <span class="keyword">helper</span> <span class="keyword">for</span> TObject</span><br><span class="line">  <span class="keyword">public</span></span><br><span class="line">    <span class="comment">&#123; Public declarations &#125;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="function"><span class="keyword">function</span> <span class="title">New</span>&lt;<span class="title">T</span>&gt;<span class="params">(<span class="keyword">out</span> SafeGuard: ISafeGuard)</span>:</span> T; <span class="keyword">static</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">implementation</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#123; THelperObject &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="function"><span class="keyword">function</span> <span class="title">THelperObject</span>.<span class="title">New</span>&lt;<span class="title">T</span>&gt;<span class="params">(<span class="keyword">out</span> SafeGuard: ISafeGuard)</span>:</span> T;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  Result := T(Guard(SafeGuard));</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure><p>Agora a forma de utilização.</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br><span class="line">  SafeGuard: ISafeGuard;</span><br><span class="line">  label1: TLabel;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  label1 := TLabel.New&lt;TLabel&gt;(SafeGuard);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>Para garantir que a memória está sendo liberada, utilize a mesma propriedade do post anterior <strong><a href="/garbage-collector-no-delphi-parte-i/">Garbage Collector no Delphi - Parte I</a></strong>, neste post está explicado detalhadamento como deve ser utilizada.</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReportMemoryLeaksOnShutdown := True;</span><br></pre></td></tr></table></figure><p>Este foi mais um exemplo em <strong>Delphi XE</strong>. Espero que tenham gostado e que seja útil de alguma forma a vocês.</p>]]></content:encoded>
      
      
      <category domain="https://jroliveira.net/categories/dev/">dev</category>
      
      
      <category domain="https://jroliveira.net/tags/delphi/">delphi</category>
      
      <category domain="https://jroliveira.net/tags/generics/">generics</category>
      
      
      <comments>https://jroliveira.net/pt/garbage-collector-no-delphi-parte-ii/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Consumindo DataSnap Server com PHP</title>
      <link>https://jroliveira.net/pt/consumindo-datasnap-server-com-php/</link>
      <guid>https://jroliveira.net/pt/consumindo-datasnap-server-com-php/</guid>
      <pubDate>Thu, 03 Mar 2011 00:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;Olá pessoal, estava estudando &lt;strong&gt;DataSnap&lt;/strong&gt; com &lt;strong&gt;Delphi XE&lt;/strong&gt;, e agora resolvi postar para vocês o resultado deste estudo. O primeiro post será sobre consumir um método em um servidor DataSnap a partir de um cliente em &lt;strong&gt;PHP&lt;/strong&gt;.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Olá pessoal, estava estudando <strong>DataSnap</strong> com <strong>Delphi XE</strong>, e agora resolvi postar para vocês o resultado deste estudo. O primeiro post será sobre consumir um método em um servidor DataSnap a partir de um cliente em <strong>PHP</strong>.</p><span id="more"></span><p>Segue o código da nossa página principal “<strong>index.htm</strong>“. O código é bem simples apenas para mostrar a integração do <strong>PHP</strong> com o <strong>DataSnap Server</strong>, a única observação é que estou utilizando o framework <strong>jQuery</strong> para JavaScript apenas para deixar o exemplo mais interessante. Segue o link para download <a href="http://jqueryui.com/download" target="_blank" rel="external noopener">jqueryui.com</a>.</p><figure class="highlight html"><figcaption><span>index.htm</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>ClientPHP<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--jQuery--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;includes/css/ui-lightness/jquery-ui-1.8.9.custom.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;includes/js/jquery-1.4.4.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;includes/js/jquery-ui-1.8.9.custom.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--Aplicacao--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;includes/css/style.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;includes/js/script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">&quot;form_index&quot;</span> <span class="attr">name</span>=<span class="string">&quot;form_index&quot;</span> <span class="attr">action</span>=<span class="string">&quot;&quot;</span> <span class="attr">onSubmit</span>=<span class="string">&quot;return false&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;txtCPF&quot;</span> <span class="attr">class</span>=<span class="string">&quot;label&quot;</span>&gt;</span>CPF: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;txtCPF&quot;</span> <span class="attr">name</span>=<span class="string">&quot;txtCPF&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;text ui-widget-content ui-corner-all&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;btnValidar&quot;</span>&gt;</span>Validar<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">id</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">src</span>=<span class="string">&quot;includes/images/loading.gif&quot;</span> <span class="attr">width</span>=<span class="string">&quot;16&quot;</span> <span class="attr">height</span>=<span class="string">&quot;16&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Abaixo o código do arquivo “<strong>style.css</strong>“.</p><figure class="highlight css"><figcaption><span>style.css</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line"><span class="attribute">font</span>: <span class="number">62.5%</span> <span class="string">&quot;Trebuchet MS&quot;</span> , sans-serif;</span><br><span class="line"><span class="attribute">margin</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.text</span> &#123;</span><br><span class="line"><span class="attribute">padding</span>: .<span class="number">3em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.label</span> &#123;</span><br><span class="line"><span class="attribute">font</span>: <span class="number">14px</span> <span class="string">&quot;Verdana&quot;</span>, sans-serif;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Agora o codigo do arquivo “<strong>script.js</strong>“.</p><figure class="highlight js"><figcaption><span>script.js</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="variable language_">document</span>).<span class="title function_">ready</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//Personaliza os botoes da tela.</span></span><br><span class="line">$(<span class="string">&quot;button&quot;</span>).<span class="title function_">button</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Esconde a imagem de loading.</span></span><br><span class="line">$(<span class="string">&quot;#loading&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Evento do botao Validar.</span></span><br><span class="line">$(<span class="string">&quot;#btnValidar&quot;</span>).<span class="title function_">click</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Verifica se foi digitado um CPF.</span></span><br><span class="line"><span class="keyword">if</span> ($.<span class="title function_">trim</span>($(<span class="string">&quot;#txtCPF&quot;</span>).<span class="title function_">val</span>()) == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line"><span class="comment">//Monstra a mensagem para o usuario.</span></span><br><span class="line"><span class="title function_">showMessage</span>(<span class="string">&quot;Digite um CPF!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Mostra a imagem de loading.</span></span><br><span class="line">$(<span class="string">&quot;#loading&quot;</span>).<span class="title function_">show</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//Realiza uma requisicao sem atualizar a pagina.</span></span><br><span class="line">$.ajax (&#123;</span><br><span class="line"><span class="comment">//Tipo da requisicao.</span></span><br><span class="line">type : <span class="string">&quot;post&quot;</span>,</span><br><span class="line"><span class="comment">//Caminho da Pagina que ira processar a requisicao.</span></span><br><span class="line">url : <span class="string">&quot;index.source.php&quot;</span>,</span><br><span class="line"><span class="comment">//Serializa os campo do formulario e passa</span></span><br><span class="line"><span class="comment">//como parametro para a pagina processar.</span></span><br><span class="line">data : $(<span class="string">&quot;#form_index&quot;</span>).<span class="title function_">serialize</span>(),</span><br><span class="line"><span class="comment">//Caso nao aconteca nenhum erro, apresenta a mensagem</span></span><br><span class="line"><span class="comment">//de retorno da pagina.</span></span><br><span class="line">success : <span class="keyword">function</span>(<span class="params">msg</span>) &#123;</span><br><span class="line"><span class="title function_">showMessage</span>(msg);</span><br><span class="line"><span class="comment">//Esconde a imagem de loading.</span></span><br><span class="line">$(<span class="string">&quot;#loading&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">&#125;,</span><br><span class="line">error : <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="title function_">showMessage</span>(<span class="string">&quot;Ocorreu um erro!&quot;</span>);</span><br><span class="line"><span class="comment">//Esconde a imagem de loading.</span></span><br><span class="line">$(<span class="string">&quot;#loading&quot;</span>).<span class="title function_">hide</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">showMessage</span>(<span class="params">message</span>) &#123;</span><br><span class="line"><span class="comment">//Cria uma div em tempo de execucao no body para mostrar</span></span><br><span class="line"><span class="comment">//a mensagem ao usuario.</span></span><br><span class="line">$(<span class="string">&quot;body&quot;</span>).<span class="title function_">append</span>(<span class="string">&quot;&lt;div id=&#x27;message&#x27;&gt;&quot;</span> + message + <span class="string">&quot;&lt;/div&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Configura e mostra a div criada acima.</span></span><br><span class="line">$(<span class="string">&quot;#message&quot;</span>).<span class="title function_">dialog</span>(&#123;</span><br><span class="line">bgiframe : <span class="literal">true</span>,</span><br><span class="line">modal : <span class="literal">true</span>,</span><br><span class="line">minimizable : <span class="literal">false</span>,</span><br><span class="line">resizable : <span class="literal">false</span>,</span><br><span class="line">closeOnEscape : <span class="literal">true</span>,</span><br><span class="line">title : <span class="string">&quot;Mensagem&quot;</span>,</span><br><span class="line">width : <span class="string">&quot;300px&quot;</span>,</span><br><span class="line">buttons : &#123;</span><br><span class="line"><span class="title class_">Ok</span> : <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//Quando clicar em OK remove a div do html.</span></span><br><span class="line">$(<span class="string">&quot;#message&quot;</span>).<span class="title function_">remove</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">close : <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">//Caso feche a div sem clicar em OK remove a div</span></span><br><span class="line"><span class="comment">//do html tambem.</span></span><br><span class="line">$(<span class="string">&quot;#message&quot;</span>).<span class="title function_">remove</span>();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>E por fim o código da nossa página “<strong>index.source.php</strong>“ que irá processar os dados.</p><figure class="highlight php"><figcaption><span>index.source.php</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Abilita apenas para aparecer os erros da aplicacao.</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ERROR);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Chama a funcao btnValidar()</span></span><br><span class="line"><span class="title function_ invoke__">btnValidar</span>();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">btnValidar</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Caminho do servidor de aplicacao.</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;servidor&quot;</span>, <span class="string">&quot;http://localhost:8081/datasnap/rest/&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Metodo que sera consumido.</span></span><br><span class="line"><span class="title function_ invoke__">define</span>(<span class="string">&quot;metodo&quot;</span>, <span class="string">&quot;TServerFunctions/validateCPF/&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Parametros do metodo.</span></span><br><span class="line"><span class="variable">$parametro</span> = <span class="variable">$_REQUEST</span>[<span class="string">&quot;txtCPF&quot;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//URL que sera processada.</span></span><br><span class="line"><span class="variable">$url</span> = <span class="title function_ invoke__">sprintf</span>(<span class="string">&quot;%s%s%s&quot;</span>, servidor, metodo, <span class="variable">$parametro</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$pagina</span>;</span><br><span class="line"><span class="keyword">try</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//Faz a requisicao a url montada acima.</span></span><br><span class="line"><span class="variable">$pagina</span> = <span class="title function_ invoke__">httpGet</span>(<span class="variable">$url</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (<span class="built_in">Exception</span> <span class="variable">$e</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//Sai do metodo e apresenta a mensagem de erro</span></span><br><span class="line"><span class="comment">//para ser capturada pela funcao sucess do jQuery.</span></span><br><span class="line"><span class="keyword">die</span>(<span class="variable">$e</span>-&gt;<span class="title function_ invoke__">getMessage</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Le os dados de retorno do servidor passando para JSON.</span></span><br><span class="line"><span class="variable">$obj</span> = <span class="title function_ invoke__">json_decode</span>(<span class="variable">$pagina</span>[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Verifica o retorno do metodo.</span></span><br><span class="line"><span class="comment">//E printa para ser capturada pela funcao sucess do jQuery.</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$obj</span>-&gt;&#123;<span class="string">&quot;result&quot;</span>&#125;[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;CPF Valido!&quot;</span>);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">echo</span>(<span class="string">&quot;CPF Invalido!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">httpGet</span>(<span class="params"><span class="variable">$url</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Faz a requisicao a url montada acima.</span></span><br><span class="line"><span class="variable">$result</span> = <span class="title function_ invoke__">file</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$result</span> == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&quot;Ocorreu um erro!&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>Abaixo uma imagem de como deverá ser criada a estrutura de pastas dos arquivos citados acima.</p><p><img src="http://junioro.files.wordpress.com/2011/02/estrutura-arquivos-datasnap-server-php.png" alt="auto" title="auto"></p><p>E agora uma imagem de como ficará o exemplo.</p><p><img src="http://junioro.files.wordpress.com/2011/02/site-datasnap-server-php.png" alt="auto" title="auto"></p><p>Bom pessoal espero que tenham gostado e que seja útil de alguma forma. A idéia deste post foi mesmo apenas demonstrar como é fácil consumir um método usando <strong>PHP</strong> em um servidor <strong>DataSnap</strong>.</p>]]></content:encoded>
      
      
      <category domain="https://jroliveira.net/categories/dev/">dev</category>
      
      
      <category domain="https://jroliveira.net/tags/delphi/">delphi</category>
      
      <category domain="https://jroliveira.net/tags/json/">json</category>
      
      <category domain="https://jroliveira.net/tags/datasnap/">datasnap</category>
      
      <category domain="https://jroliveira.net/tags/jquery/">jquery</category>
      
      <category domain="https://jroliveira.net/tags/php/">php</category>
      
      
      <comments>https://jroliveira.net/pt/consumindo-datasnap-server-com-php/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Garbage Collector no Delphi - Parte I</title>
      <link>https://jroliveira.net/pt/garbage-collector-no-delphi-parte-i/</link>
      <guid>https://jroliveira.net/pt/garbage-collector-no-delphi-parte-i/</guid>
      <pubDate>Wed, 29 Dec 2010 00:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;Olá pessoal, depois de algum tempo sem postar venho com uma novidade para vocês, para alguns isto pode não ser novidade, mas tenho certeza que para outros é, pelo menos para mim foi novidade, programo em Delphi desde 2005 mais ou menos e fiquei sabendo que o Delphi tinha &lt;strong&gt;Garbage Collector&lt;/strong&gt; só a dias atrás então resolvi criar uma implementação de exemplo.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Olá pessoal, depois de algum tempo sem postar venho com uma novidade para vocês, para alguns isto pode não ser novidade, mas tenho certeza que para outros é, pelo menos para mim foi novidade, programo em Delphi desde 2005 mais ou menos e fiquei sabendo que o Delphi tinha <strong>Garbage Collector</strong> só a dias atrás então resolvi criar uma implementação de exemplo.</p><span id="more"></span><p>Neste primeiro exemplo vou trabalhar apenas com objetos que herdam de uma classe <strong>Super Classe</strong>.</p><p>A primeira implementação é da <strong>Super Classe</strong> na qual todas as outras classes irá herdá-la, a classe é bem simples ela tem uma interface do <strong>IModel</strong> que é do mesmo tipo da <strong>IUnknown</strong> que será responsável por dizer que o objeto será liberado automaticamente e a classe <strong>TModel</strong> é quem irá herdar <strong>TInterfacedObject</strong> e a inteface <strong>IUnknown</strong>.</p><figure class="highlight delphi"><figcaption><span>TModel.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unit</span> Model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span></span><br><span class="line">  IModel = <span class="keyword">type</span> IUnknown;</span><br><span class="line"></span><br><span class="line">  <span class="title">TModel</span> = <span class="keyword">class</span>(TInterfacedObject, IModel)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">implementation</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure><p>A segunda implementação é da <strong>Sub Classe</strong>, ela irá conter uma interface que irá conter todos os métodos necessários na classe principal e uma classe que irá herdar a <strong>Super Classe</strong> e implementar a classe que contém os métodos que serão usados na classe.<br>Note que na frente da declaração do método <strong>Destroy</strong> existe um <strong>override</strong> pois o mesmo está declarado como <strong>virtual</strong> na classe <strong>TObject</strong> o que indica que o mesmo pode ser sobrescrito na <strong>Sub Classe</strong>.</p><figure class="highlight delphi"><figcaption><span>TModelPessoa.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">unit</span> ModelPessoa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">uses</span></span><br><span class="line">  Dialogs, Model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span></span><br><span class="line">  IModelPessoa = <span class="keyword">interface</span></span><br><span class="line">    <span class="function"><span class="keyword">procedure</span> <span class="title">Teste</span><span class="params">()</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title">TModelPessoa</span> = <span class="keyword">class</span>(TModel, IModelPessoa)</span><br><span class="line">  <span class="keyword">public</span></span><br><span class="line">    <span class="comment">&#123; Public declarations &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">constructor</span> <span class="title">Create</span><span class="params">()</span>;</span></span><br><span class="line">    <span class="function"><span class="keyword">destructor</span> <span class="title">Destroy</span><span class="params">()</span>;</span> <span class="keyword">override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">procedure</span> <span class="title">Teste</span><span class="params">()</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">implementation</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&#123; TModelPessoa &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">constructor</span> <span class="title">TModelPessoa</span>.<span class="title">Create</span><span class="params">()</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  ShowMessage(<span class="string">&#x27;Create&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">destructor</span> <span class="title">TModelPessoa</span>.<span class="title">Destroy</span><span class="params">()</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  ShowMessage(<span class="string">&#x27;Destroy&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">inherited</span> Destroy();</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TModelPessoa</span>.<span class="title">Teste</span><span class="params">()</span>;</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  ShowMessage(<span class="string">&#x27;Teste&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure><p>Pronto agora é só usar mos, primeiro temos que criar uma variável do tipo da interface da <strong>Sub Classe</strong>, pois é que o coletor ficará verificando e quando a mesma sair do contexto será capturado automaticamente pelo <strong>Garbage Collector</strong>. Depois vamos instanciar esta variável pela classe concreta que implementa a nossa interface para podermos usar o objeto, note que ao instanciar o objeto irá aparecer a mensagem <em>“Create”</em>, apos executar pelo método <strong>Teste()</strong> irá aparecer a mensagem <em>“Teste”</em> e por final quando terminar o método principal na qual foi declarada a variável do tipo da interface da <strong>Sub Classe</strong> irá aparecer a mensagem <em>“Destroy”</em> que indicará que a nossa variável foi liberada da memória pelo <strong>Garbage Collector</strong> do Delphi.</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br><span class="line">  objPessoa: IModelPessoa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  objPessoa := TModelPessoa.Create();</span><br><span class="line">  objPessoa.Teste();</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>Este exemplo foi feito em Delphi XE, caso queria mais uma forma de verificar se a variável foi realmente liberada da memória o Delphi XE tem a propriedade <strong>ReportMemoryLeaksOnShutdown</strong> que mostra os objetos que ainda estão na memória.<br>Segue abaixo uma forma de usar esta propriedade.</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">program</span> Estudo11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">uses</span></span><br><span class="line">  Forms,</span><br><span class="line">  Unit8 <span class="keyword">in</span> <span class="string">&#x27;Unit8.pas&#x27;</span> <span class="comment">&#123;Form8&#125;</span>,</span><br><span class="line">  Model <span class="keyword">in</span> <span class="string">&#x27;Model.pas&#x27;</span>,</span><br><span class="line">  ModelPessoa <span class="keyword">in</span> <span class="string">&#x27;ModelPessoa.pas&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">&#123;$R *.res&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  ReportMemoryLeaksOnShutdown := True;</span><br><span class="line"></span><br><span class="line">  Application.Initialize;</span><br><span class="line">  Application.MainFormOnTaskbar := True;</span><br><span class="line">  Application.CreateForm(TForm8, Form8);</span><br><span class="line">  Application.Run;</span><br><span class="line"><span class="keyword">end</span>.</span><br></pre></td></tr></table></figure><p>Espero que este exemplo seja útil a vocês de alguma forma, até a próxima.</p>]]></content:encoded>
      
      
      <category domain="https://jroliveira.net/categories/dev/">dev</category>
      
      
      <category domain="https://jroliveira.net/tags/delphi/">delphi</category>
      
      
      <comments>https://jroliveira.net/pt/garbage-collector-no-delphi-parte-i/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>JSON (JavaScript Object Notation) e Generics no Delphi</title>
      <link>https://jroliveira.net/pt/json-javascript-object-notation-e-generics-no-delphi/</link>
      <guid>https://jroliveira.net/pt/json-javascript-object-notation-e-generics-no-delphi/</guid>
      <pubDate>Thu, 18 Nov 2010 00:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;Olá pessoal, mais um post sobre Delphi desta vez um demonstrar duas novas tecnologias que está sendo muito melhoradas no Delphi deste a versão 2009 até a ultima versão o Delphi XE.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Olá pessoal, mais um post sobre Delphi desta vez um demonstrar duas novas tecnologias que está sendo muito melhoradas no Delphi deste a versão 2009 até a ultima versão o Delphi XE.</p><span id="more"></span><p><strong>Generics</strong> é uma forma de poder passar parâmetro de tipos para classes e métodos possibilitando assim reutilização de código por exemplo e <a href="http://www.json.org/json-pt.html" target="_blank" rel="external noopener">JSON</a> (JavaScript Object Notation) é uma forma de troca de dados entre aplicações semelhante ao <strong>XML</strong> porém com uma sintaxe bem mais simples e leve. O Delphi XE como algumas versões anteriores dá suporte a implementação usando <strong>JSON</strong>, em nosso exemplo vamos criar um método totalmente genêrico que recebe um objeto e um tipo e vamos usar o <strong>JSON</strong> para formatar este objeto e gravar no disco usando a nova classe de <strong>IO</strong> (input&#x2F;output) do Delphi e um método de leitura deste arquivo no formato <strong>JSON</strong> e retornar o mesmo a um Objeto novamente passando o tipo do objeto e o caminho onde se encontra o arquivo.</p><p>Primeiro vamos criar uma nova classe do tipo TPessoa.</p><figure class="highlight delphi"><figcaption><span>TPessoa.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span></span><br><span class="line">  TPessoa = <span class="keyword">class</span></span><br><span class="line">  <span class="keyword">private</span></span><br><span class="line">    <span class="comment">&#123; Private declarations &#125;</span></span><br><span class="line">    FPessIden: Integer;</span><br><span class="line">    FPessNome: <span class="keyword">string</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span></span><br><span class="line">    <span class="comment">&#123; Published declarations &#125;</span></span><br><span class="line">    <span class="keyword">property</span> PessIden: Integer <span class="keyword">read</span> FPessIden <span class="keyword">write</span> FPessIden;</span><br><span class="line">    <span class="keyword">property</span> PessNome: <span class="keyword">string</span> <span class="keyword">read</span> FPessNome <span class="keyword">write</span> FPessNome;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>Para conseguirmos desenvolver nossos métodos temos antes que adicionar ao uses as <strong>unit’s</strong> sitadas abaixo, acima de cada unit tem a descrição de sua função no projeto.</p><figure class="highlight delphi"><figcaption><span>TPessoa.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uses</span></span><br><span class="line">  SysUtils,</span><br><span class="line"></span><br><span class="line">  <span class="comment">&#123; Unit que contem os novos metodos de I/O &#125;</span></span><br><span class="line">  IOUtils,</span><br><span class="line"></span><br><span class="line">  <span class="comment">&#123; Unit&#x27;s necessarioas para usar JSON &#125;</span></span><br><span class="line">  DBXJSONReflect, DBXJSON,</span><br><span class="line"></span><br><span class="line">  <span class="comment">&#123; Unit necessaria para usar Generic &#125;</span></span><br><span class="line">  Generics.Collections;</span><br></pre></td></tr></table></figure><p>Agora vamos criar nossa classe que irá conter os métos necessários para carregar e salvar os dados no disco. O <strong>class</strong> antes da <strong>function</strong> indica que estes métodos serão státicos não é necessário instânciar a classe <strong>TJSONTools</strong> para usar estes métodos e a descrição <strong>T : class</strong> indica que este método recebe um tipo e que a variável <strong>obj</strong> passada por parâmetro é deste tipo, e na outra função que ela retorna o tipo especificado.</p><figure class="highlight delphi"><figcaption><span>TJSONTools.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span></span><br><span class="line">  TJSONTools = <span class="keyword">class</span></span><br><span class="line">    <span class="keyword">public</span></span><br><span class="line">    <span class="comment">&#123; Public declarations &#125;</span></span><br><span class="line">    <span class="keyword">class</span> <span class="function"><span class="keyword">function</span> <span class="title">saveFileJSON</span>&lt;<span class="title">T</span> :</span> <span class="keyword">class</span>&gt;(obj: T; <span class="keyword">const</span> filePath: <span class="keyword">string</span>): Boolean;</span><br><span class="line">    <span class="keyword">class</span> <span class="function"><span class="keyword">function</span> <span class="title">loadFileJSON</span>&lt;<span class="title">T</span> :</span> <span class="keyword">class</span>&gt;(<span class="keyword">const</span> filePath: <span class="keyword">string</span>): T;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>Agora nosso método que irá gravar no disco o objeto da classe descrita acima.</p><figure class="highlight delphi"><figcaption><span>TJSONMarshal.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="function"><span class="keyword">function</span> <span class="title">TJSONTools</span>.<span class="title">saveFileJSON</span>&lt;<span class="title">T</span>&gt;<span class="params">(obj: T; <span class="keyword">const</span> filePath: <span class="keyword">string</span>)</span>:</span> Boolean;</span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">  Marshal: TJSONMarshal;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  Marshal := TJSONMarshal.Create(TJSONConverter.Create());</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">      TFile.WriteAllText(filePath, (Marshal.Marshal(obj) <span class="keyword">as</span> TObject).ToString);</span><br><span class="line"></span><br><span class="line">      Result := True;</span><br><span class="line">    <span class="keyword">except</span></span><br><span class="line">      Result := False;</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">finally</span></span><br><span class="line">    FreeAndNil(Marshal);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>Agora o método responsável por ler o arquivo e carregar novamente os dados para um objeto.</p><figure class="highlight delphi"><figcaption><span>TJSONTools.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="function"><span class="keyword">function</span> <span class="title">TJSONTools</span>.<span class="title">loadFileJSON</span>&lt;<span class="title">T</span>&gt;<span class="params">(<span class="keyword">const</span> filePath: <span class="keyword">string</span>)</span>:</span> T;</span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">  Unmarshal: TJSONUnMarshal;</span><br><span class="line">  obj: TJSONObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  Unmarshal := TJSONUnMarshal.Create();</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">    <span class="keyword">try</span></span><br><span class="line">      <span class="keyword">if</span> <span class="keyword">not</span>(FileExists(filePath)) <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">Exit</span>(<span class="keyword">nil</span>);</span><br><span class="line"></span><br><span class="line">      obj := TJSONObject.ParseJSONValue(TEncoding.ASCII.GetBytes(TFile.ReadAllText(filePath)), <span class="number">0</span>) <span class="keyword">as</span> TJSONObject;</span><br><span class="line"></span><br><span class="line">      Result := T(Unmarshal.Unmarshal(obj));</span><br><span class="line">    <span class="keyword">except</span></span><br><span class="line">      <span class="keyword">Exit</span>(<span class="keyword">nil</span>);</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line">  <span class="keyword">finally</span></span><br><span class="line">    FreeAndNil(Unmarshal);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>Agora uma forma de poder usar nossa classe.</p><figure class="highlight delphi"><figcaption><span>TPessoa.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br><span class="line">  objPessoa: TPessoa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  objPessoa:= TPessoa.Create();</span><br><span class="line">  objPessoa.PessIden := <span class="number">1</span>;</span><br><span class="line">  objPessoa.PessNome := <span class="string">&#x27;A Junior&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (TJSONTools.saveFileJSON&lt;TPessoa&gt;(objPessoa, <span class="string">&#x27;C:\pessoa.txt&#x27;</span>)) <span class="keyword">then</span></span><br><span class="line">    ShowMessage(<span class="string">&#x27;Criou o arquivo no caminho: &#x27;</span> + <span class="string">#13</span> + <span class="string">&#x27; C:\pessoa.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line">  objPessoa := TJSONTools.loadFileJSON&lt;TPessoa&gt;(<span class="string">&#x27;C:\pessoa.txt&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span> (Assigned(objPessoa)) <span class="keyword">then</span></span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    ShowMessage(</span><br><span class="line">      <span class="string">&#x27;PessIden: &#x27;</span> + IntToStr(objPessoa.PessIden) + <span class="string">#13</span> +</span><br><span class="line">      <span class="string">&#x27;PessNome: &#x27;</span> + objPessoa.PessNome</span><br><span class="line">    );</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    ShowMessage(<span class="string">&#x27;Nao foi possivel des-serializar o objeto&#x27;</span>);</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>Este foi apenas um exemplo didático usando <strong>JSON</strong> e <strong>Generics</strong> no Delphi estes métodos ainda podem ser refatorados e criado validações para tratar possiveis erros de parâmetros que podem ser identificados criando testes unitários sobres estes métodos. Obrigado pela visita e até a próxima.</p>]]></content:encoded>
      
      
      <category domain="https://jroliveira.net/categories/dev/">dev</category>
      
      
      <category domain="https://jroliveira.net/tags/delphi/">delphi</category>
      
      <category domain="https://jroliveira.net/tags/generics/">generics</category>
      
      <category domain="https://jroliveira.net/tags/json/">json</category>
      
      
      <comments>https://jroliveira.net/pt/json-javascript-object-notation-e-generics-no-delphi/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RTTI e Class Helper no Delphi</title>
      <link>https://jroliveira.net/pt/rtti-class-helper-no-delphi/</link>
      <guid>https://jroliveira.net/pt/rtti-class-helper-no-delphi/</guid>
      <pubDate>Sun, 07 Nov 2010 00:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;Olá pessoal, mais um post sobre RTTI (Run-Time Type Information) no Delphi porém agora eu explorei um pouco mais das novidades do Delphi XE como as novas classes para trabalhar com RTTI e o que pode ser feito usando &lt;strong&gt;Class Helper&lt;/strong&gt; que já vem desde as versões anteriores.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Olá pessoal, mais um post sobre RTTI (Run-Time Type Information) no Delphi porém agora eu explorei um pouco mais das novidades do Delphi XE como as novas classes para trabalhar com RTTI e o que pode ser feito usando <strong>Class Helper</strong> que já vem desde as versões anteriores.</p><span id="more"></span><p>Sobre RTTI não vou me fala muito pois já fiz um post sobre este assunto e <strong>Class Helper</strong> é um tipo que serve para extender uma classes adionando-a métodos e propriedades.</p><p>Para este exemplo vou usar o mesmo contexto do post anterior sobre RTTI para facilitar o entendimento e fazer uma comparação já que no post anterior trabalhei com a versão do Delphi 7 e neste post vou trabalhar com a versão do Delphi XE.</p><p>O primeiro código é de uma classe genêrica de modelo da estrutura da tabela no banco de dados. A primeira diferênça é que a mesma não precisa mais herdar da classe TPersistent que contém as directivas de compilação <strong>{$M+}</strong> (<strong>{$METHODINFO ON}</strong>) e <strong>{$M-}</strong> (<strong>{$METHODINFO OFF}</strong>) necessárias para implementar o acesso dos dados em memória e retirei também os métodos <strong>Create()</strong> e <strong>Destroy()</strong> pois não eram necessários.</p><figure class="highlight delphi"><figcaption><span>TModel.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span></span><br><span class="line">  TModel = <span class="keyword">class</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>O segundo código é de uma classe de modelo da estrutura da tabela Pessoa do banco de dados, note que ela herda a classe <strong>TModel</strong> e a segunda diferênça é que suas propridades não precisam mais estarem declaradas na sessão <strong>published</strong> da classe pode ser declaradas na sessão <strong>public</strong> e mesmo assim é possível acessa-lás em tempo de execução. Retirei também os métodos <strong>Create()</strong> e <strong>Destroy()</strong> pois também não eram necessários.</p><figure class="highlight delphi"><figcaption><span>TModelPessoa.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uses</span></span><br><span class="line">  Model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span></span><br><span class="line">  <span class="title">TModelPessoa</span> = <span class="keyword">class</span>(TModel)</span><br><span class="line">  <span class="keyword">private</span></span><br><span class="line">    <span class="comment">&#123; Private declarations &#125;</span></span><br><span class="line">    FPessIden: Integer;</span><br><span class="line">    FPessNome: <span class="keyword">String</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span></span><br><span class="line">    <span class="comment">&#123; Public declarations &#125;</span></span><br><span class="line">    <span class="keyword">property</span> PessIden: Integer <span class="keyword">read</span> FPessIden <span class="keyword">write</span> FPessIden;</span><br><span class="line">    <span class="keyword">property</span> PessNome: <span class="keyword">String</span> <span class="keyword">read</span> FPessNome <span class="keyword">write</span> FPessNome;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>O terceiro código é de uma classe que teria os métodos de operação na base de dados porém como no exemplo anterior retirei pois este não é o foco deste post e sim apenas mostrar uma utilização do RTTI e alterei a classe extendendo ela da classe <strong>TModel</strong>. Então vamos a explicação, o método <strong>fillProperty</strong> que é responsável por verificar as propriedades do objeto da classe principal <strong>TModel</strong> ou de uma classe que herde dela no caso <strong>TModelPessoa</strong>. Outro detalhe importante é a declaração da unit <strong>Rtti</strong> que contém os novos métodos responsáveis por acessar os dados em memória.</p><figure class="highlight delphi"><figcaption><span>TController.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uses</span></span><br><span class="line">  TypInfo, Rtti, Classes, Dialogs, Model, Variants, SysUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span></span><br><span class="line">  TController = <span class="keyword">class</span> <span class="keyword">helper</span> <span class="keyword">for</span> TModel</span><br><span class="line">  <span class="keyword">public</span></span><br><span class="line">    <span class="comment">&#123; Public declarations &#125;</span></span><br><span class="line">    <span class="function"><span class="keyword">procedure</span> <span class="title">fillProperties</span><span class="params">()</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>Como descrito anteriomente o método responsável por acessar os dados em memória do objeto em tempo de execução. Note que em comparação com o post anterior é necessário apenas alguns objetos para realizar está operação, note também que utilizei <strong>for in</strong> para percorrer a lista de propriedades em memória que é outra novidade que não existia no <strong>Delphi 7</strong>, no exemplo anterior tinha utilizado <strong>for</strong>. Ao final será imprimida na tela as propriedades e os valores das propridades do objeto principal.</p><figure class="highlight delphi"><figcaption><span>TController.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TController</span>.<span class="title">fillProperties</span><span class="params">()</span>;</span></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">  msg: TStringList;</span><br><span class="line">  context: TRttiContext;</span><br><span class="line">  prop: TRttiProperty;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  context := TRttiContext.Create();</span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">    msg:= TStringList.Create();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> prop <span class="keyword">in</span> context.GetType(self.ClassType).GetProperties <span class="keyword">do</span></span><br><span class="line">      msg.Add(Format(<span class="string">&#x27;%s: %s;&#x27;</span>, [prop.<span class="keyword">Name</span>, VarToStr(prop.GetValue(self).AsVariant)]));</span><br><span class="line"></span><br><span class="line">    ShowMessage(msg.Text);</span><br><span class="line">  <span class="keyword">finally</span></span><br><span class="line">    context.Free();</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>E por fim um trecho de código para você adicionar ao evento de um <strong>button</strong> por exemplo de como utilizar o método <strong>fillProperties</strong> da classe <strong>TController</strong>.</p><figure class="highlight delphi"><figcaption><span>TController.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br><span class="line">  objPessoa: TModelPessoa;</span><br><span class="line"></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">    objPessoa := TModelPessoa.Create();</span><br><span class="line">    objPessoa.PessIden := <span class="number">23</span>;</span><br><span class="line">    objPessoa.PessNome := <span class="string">&#x27;Oliveira&#x27;</span>;</span><br><span class="line">    objPessoa.fillProperties();</span><br><span class="line">  <span class="keyword">finally</span></span><br><span class="line">    FreeAndNil(objPessoa);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>Este foi mais um post sobre RTTI no Delphi, espero que gostem. Em breve estárei postando um exemplo de como acessar propriedades que contém objetos e não apenas tipos primitivos usando RTTI.</p><p>Agradeço a visita e volte sempre.</p>]]></content:encoded>
      
      
      <category domain="https://jroliveira.net/categories/dev/">dev</category>
      
      
      <category domain="https://jroliveira.net/tags/delphi/">delphi</category>
      
      <category domain="https://jroliveira.net/tags/rtti/">rtti</category>
      
      
      <comments>https://jroliveira.net/pt/rtti-class-helper-no-delphi/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>Regras de usabilidade</title>
      <link>https://jroliveira.net/pt/regras-de-usabilidade/</link>
      <guid>https://jroliveira.net/pt/regras-de-usabilidade/</guid>
      <pubDate>Fri, 06 Aug 2010 00:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;Segue algumas regras de usabilidade para aplicações web.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>Segue algumas regras de usabilidade para aplicações web.</p><span id="more"></span><p>1º. Clareza na arquitetura da informação:</p><p><em>O usuário deve entender estrutura da aplicação.</em></p><p>2º. Facilidade de navegação:</p><p><em>O usuário deve acessar a página desejada com no máximo três cliques.</em></p><p>3º. Simplicidade:</p><p><em>Páginas sem acumulo de informações.</em></p><p>4º. Relevância de conteúdo:</p><p><em>O conteúdo das páginas devem ser objetivos.</em></p><p>5º. Manter a consistência:</p><p><em>Manter um padrão entre cada página, para que o usuário não se preocupe com o que irá acontecer.</em></p><p>6º. Tempo suportavél:</p><p><em>A resposta da página requisitada deve ser rápida, menos dez segundos.</em></p><p>7º. Foco nos usuários:</p><p><em>A página deve ser criada com foco na atividade do usuário.</em></p>]]></content:encoded>
      
      
      <category domain="https://jroliveira.net/categories/dev/">dev</category>
      
      
      <category domain="https://jroliveira.net/tags/ux/">ux</category>
      
      
      <comments>https://jroliveira.net/pt/regras-de-usabilidade/#disqus_thread</comments>
      
    </item>
    
    <item>
      <title>RTTI (Run-Time Type Information) no Delphi</title>
      <link>https://jroliveira.net/pt/rtti-run-time-type-information-no-delphi/</link>
      <guid>https://jroliveira.net/pt/rtti-run-time-type-information-no-delphi/</guid>
      <pubDate>Sat, 31 Jul 2010 00:00:00 GMT</pubDate>
      
      <description>&lt;p&gt;RTTI (Run-Time Type Information) é uma técnica utilizada para identificar tipo de objetos armazenados em memória em tempo de execução.&lt;/p&gt;</description>
      
      
      
      <content:encoded><![CDATA[<p>RTTI (Run-Time Type Information) é uma técnica utilizada para identificar tipo de objetos armazenados em memória em tempo de execução.</p><span id="more"></span><p>Abaixo um exemplo de como utilizar RTTI em sua aplicação, este exemplo é apenas uma idéia de como usar RTTI para criar classes e métodos genêricos de acesso a base de dados.</p><p>O primeiro código é de uma classe genêrica de modelo da estrutura da tabela no banco de dados. Note que a mesma herda da classe TPersistent pois nela existe as directivas de compilação <strong>{$M+}</strong> (<strong>{$METHODINFO ON}</strong>) e <strong>{$M-}</strong> (<strong>{$METHODINFO OFF}</strong>) necessárias para implementar o acesso dos dados em memória.</p><figure class="highlight delphi"><figcaption><span>TModel.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span></span><br><span class="line">  <span class="title">TModel</span> = <span class="keyword">class</span>(TPersistent)</span><br><span class="line">    <span class="keyword">private</span></span><br><span class="line">      <span class="comment">&#123; Private declarations &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span></span><br><span class="line">      <span class="comment">&#123; Public declarations &#125;</span></span><br><span class="line">      <span class="function"><span class="keyword">constructor</span> <span class="title">Create</span><span class="params">()</span>;</span> <span class="keyword">virtual</span>;</span><br><span class="line">      <span class="function"><span class="keyword">destructor</span> <span class="title">Destroy</span><span class="params">()</span>;</span> <span class="keyword">override</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>O segundo código é de uma classe de modelo da estrutura da tabela Pessoa do banco de dados, note que ela herda a classe <strong>TModel</strong> e que suas propridades estão declaradas na sessão <strong>published</strong> pois assim é possível acessa-lás em tempo de execução.</p><figure class="highlight delphi"><figcaption><span>TModelPessoa.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span></span><br><span class="line">  <span class="title">TModelPessoa</span> = <span class="keyword">class</span>(TModel)</span><br><span class="line">    <span class="keyword">private</span></span><br><span class="line">      <span class="comment">&#123; Private declarations &#125;</span></span><br><span class="line">      FPessIden: Integer;</span><br><span class="line">      FPessNome: <span class="keyword">String</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span></span><br><span class="line">      <span class="comment">&#123; Public declarations &#125;</span></span><br><span class="line">      <span class="function"><span class="keyword">constructor</span> <span class="title">Create</span><span class="params">()</span>;</span> <span class="keyword">override</span>;</span><br><span class="line">      <span class="function"><span class="keyword">destructor</span> <span class="title">Destroy</span><span class="params">()</span>;</span> <span class="keyword">override</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">published</span></span><br><span class="line">      <span class="comment">&#123; Published declarations &#125;</span></span><br><span class="line">      <span class="keyword">property</span> PessIden: Integer <span class="keyword">read</span> FPessIden <span class="keyword">write</span> FPessIden;</span><br><span class="line">      <span class="keyword">property</span> PessNome: <span class="keyword">String</span> <span class="keyword">read</span> FPessNome <span class="keyword">write</span> FPessNome;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>O terceiro código é de uma classe teria os métodos de operação na base de dados porém eu retirei pois este não é o foco deste post e sim apenas mostrar uma utilização do RTTI. Então vamos a explicação, o método <strong>fillProperty</strong> é responsável por verificar as propriedades do objeto do tipo ou que herde a classe <strong>TModel</strong> passado por parâmetro. Outro detalhe importante é a declaração da unit <strong>TypInfo</strong> que contém os métodos responsáveis em acessar os dados em memória.</p><figure class="highlight delphi"><figcaption><span>TController.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">uses</span></span><br><span class="line">  TypInfo, Dialogs, Classes, Model;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span></span><br><span class="line">  <span class="title">TController</span> = <span class="keyword">class</span>(TObject)</span><br><span class="line">    <span class="keyword">private</span></span><br><span class="line">      <span class="comment">&#123; Private declarations &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span></span><br><span class="line">      <span class="comment">&#123; Public declarations &#125;</span></span><br><span class="line">      <span class="function"><span class="keyword">constructor</span> <span class="title">Create</span><span class="params">()</span>;</span> <span class="keyword">virtual</span>;</span><br><span class="line">      <span class="function"><span class="keyword">destructor</span> <span class="title">Destroy</span><span class="params">()</span>;</span> <span class="keyword">override</span>;</span><br><span class="line">      <span class="function"><span class="keyword">procedure</span> <span class="title">fillProperties</span><span class="params">(model: TModel)</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>Como descrito anteriomente o método responsável por acessar os dados em memória do objeto em tempo de execução. Note que após o termino do <strong>for</strong> foi inserido um <strong>ShowMessage(msg.Text);</strong> para informar ao usuário as propriedades e o valor das propriedades do objeto passado por parâmetro.</p><figure class="highlight delphi"><figcaption><span>TController.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">procedure</span> <span class="title">TController</span>.<span class="title">fillProperties</span><span class="params">(model: TModel)</span>;</span></span><br><span class="line"><span class="keyword">var</span></span><br><span class="line">  listProp: PPropList;</span><br><span class="line">  listPropCount, i: Integer;</span><br><span class="line">  propInfo: TPropInfo;</span><br><span class="line">  valueProp: Variant;</span><br><span class="line">  msg: TStringList;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="comment">&#123;Obtem informacoes dos atributos que sao Publisheds&#125;</span></span><br><span class="line">  listPropCount:= GetPropList(model.ClassInfo, tkAny, <span class="keyword">nil</span>);</span><br><span class="line">  GetMem(listProp, listPropCount * SizeOf(TPropInfo));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">    msg:= TStringList.Create();</span><br><span class="line"></span><br><span class="line">    GetPropList(model, listProp);</span><br><span class="line">    <span class="keyword">for</span> i:= <span class="number">0</span> <span class="keyword">to</span> Pred(listPropCount) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">begin</span></span><br><span class="line">      <span class="comment">&#123;Obtem informacoes da propriedade&#125;</span></span><br><span class="line">      propInfo:= TPropInfo(listProp^[i]^);</span><br><span class="line">      valueProp:= GetPropValue(model, propInfo.<span class="keyword">Name</span>);</span><br><span class="line"></span><br><span class="line">      msg.Add(Format(<span class="string">&#x27;%s: %s;&#x27;</span>, [propInfo.<span class="keyword">Name</span>, valueProp]));</span><br><span class="line">    <span class="keyword">end</span>;</span><br><span class="line"></span><br><span class="line">    ShowMessage(msg.Text);</span><br><span class="line">  <span class="keyword">finally</span></span><br><span class="line">    FreeAndNil(msg);</span><br><span class="line">    FreeMem(listProp);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>E por fim um trecho de código para você adicionar ao evento de um <strong>button</strong> por exemplo de como utilizar o método <strong>fillProperties</strong> da classe <strong>TController</strong>.</p><figure class="highlight delphi"><figcaption><span>TController.pas</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span></span><br><span class="line">  modelPessoa: TModelPessoa;</span><br><span class="line">  controller: TController;</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">try</span></span><br><span class="line">    modelPessoa:= TModelPessoa.Create();</span><br><span class="line">    controller := TController.Create();</span><br><span class="line">    modelPessoa.PessIden:= StrToInt(self.edtPessIden.Text);</span><br><span class="line">    modelPessoa.PessNome:= self.edtPessNome.Text;</span><br><span class="line"></span><br><span class="line">    controller.fillProperties(modelPessoa);</span><br><span class="line">  <span class="keyword">finally</span></span><br><span class="line">    FreeAndNil(modelPessoa);</span><br><span class="line">    FreeAndNil(controller);</span><br><span class="line">  <span class="keyword">end</span>;</span><br><span class="line"><span class="keyword">end</span>;</span><br></pre></td></tr></table></figure><p>Espero que gostem e seja útil de alguma forma este exemplo. Em breve estárei postando uma aplicação mais real da utilização do RTTI para criação de classes e métodos genêricos de acesso a dados, lembrando que este não é a única utilização do RTTI.</p><p>Desde já agredeço a visita.</p>]]></content:encoded>
      
      
      <category domain="https://jroliveira.net/categories/dev/">dev</category>
      
      
      <category domain="https://jroliveira.net/tags/delphi/">delphi</category>
      
      <category domain="https://jroliveira.net/tags/rtti/">rtti</category>
      
      
      <comments>https://jroliveira.net/pt/rtti-run-time-type-information-no-delphi/#disqus_thread</comments>
      
    </item>
    
  </channel>
</rss>
